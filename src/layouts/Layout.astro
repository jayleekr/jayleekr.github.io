---
import BaseHead from '../components/BaseHead.astro';
import DesktopNav from '../components/Navigation/DesktopNav.astro';
import MobileBottomNav from '../components/Navigation/MobileBottomNav.astro';
import Footer from '../components/Footer.astro';
import WhimsyEnhancer from '../components/WhimsyEnhancer.astro';
import CommandPalette from '../components/CommandPalette.astro';
import LoadingStates from '../components/LoadingStates.astro';
import SearchModal from '../components/Search/SearchModal.astro';
import PerformanceMonitor from '../components/PerformanceMonitor.astro';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { title, description, image, noIndex } = Astro.props;
---

<!doctype html>
<html lang="ko">
  <head>
    <BaseHead 
      title={title} 
      description={description} 
      image={image}
      noIndex={noIndex}
    />
  </head>
  <body class="bg-white dark:bg-gray-900 transition-colors duration-300 min-h-screen flex flex-col">
    <!-- Whimsy Components -->
    <WhimsyEnhancer />
    <CommandPalette />
    <LoadingStates />
    <PerformanceMonitor />
    
    <!-- Desktop Navigation -->
    <DesktopNav />
    
    <!-- Main Content with mobile bottom navigation spacing -->
    <main id="main-content" class="flex-1 mb-20 md:mb-0">
      <slot />
    </main>
    
    <!-- Footer -->
    <Footer />
    
    <!-- Mobile Bottom Navigation -->
    <MobileBottomNav />
    
    <!-- Search Modal -->
    <SearchModal />
    
    <!-- Mobile Bottom Navigation Integration Script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Handle mobile search button
        const mobileSearchBtn = document.getElementById('mobile-search-button');
        const searchModal = document.querySelector('[data-search-modal]') || document.getElementById('search-modal');
        
        if (mobileSearchBtn && searchModal) {
          mobileSearchBtn.addEventListener('click', () => {
            searchModal.classList.remove('hidden');
            const searchInput = searchModal.querySelector('input[type="search"]');
            if (searchInput) {
              setTimeout(() => searchInput.focus(), 100);
            }
          });
        }
        
        // Handle mobile theme toggle
        const mobileThemeBtn = document.getElementById('mobile-theme-toggle');
        const desktopThemeBtn = document.getElementById('theme-toggle');
        
        if (mobileThemeBtn && desktopThemeBtn) {
          mobileThemeBtn.addEventListener('click', () => {
            desktopThemeBtn.click();
          });
        }
        
        // Handle mobile language toggle
        const mobileLanguageBtn = document.getElementById('mobile-language-toggle');
        const desktopLanguageBtn = document.querySelector('.language-switcher button') || 
                                   document.querySelector('[data-language-toggle]');
        
        if (mobileLanguageBtn && desktopLanguageBtn) {
          mobileLanguageBtn.addEventListener('click', () => {
            desktopLanguageBtn.click();
          });
        }
        
        // Handle desktop search button integration
        const desktopSearchBtn = document.getElementById('desktop-search-button');
        if (desktopSearchBtn && searchModal) {
          desktopSearchBtn.addEventListener('click', () => {
            searchModal.classList.remove('hidden');
            const searchInput = searchModal.querySelector('input[type="search"]');
            if (searchInput) {
              setTimeout(() => searchInput.focus(), 100);
            }
          });
        }
        
        // Add active state management for mobile nav
        const currentPath = window.location.pathname;
        const navItems = document.querySelectorAll('[data-nav-item]');
        
        navItems.forEach(item => {
          const href = item.getAttribute('href');
          if (href && href !== '#search' && href !== '#theme' && href !== '#language') {
            // Check if current path matches this nav item
            let isActive = false;
            if (href === '/' || href === '/en') {
              isActive = currentPath === href;
            } else {
              isActive = currentPath.startsWith(href);
            }
            
            if (isActive) {
              item.classList.add('text-primary-600', 'dark:text-primary-400', 'bg-primary-50', 'dark:bg-primary-900/20');
              item.setAttribute('aria-current', 'page');
            }
          }
        });
        
        // Handle safe area insets for mobile devices
        if (window.innerWidth < 768) {
          const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-bottom') || '0px';
          const mainContent = document.getElementById('main-content');
          if (mainContent) {
            mainContent.style.paddingBottom = `calc(5rem + ${safeAreaBottom})`;
          }
        }
        
        // Update padding on window resize
        window.addEventListener('resize', () => {
          const mainContent = document.getElementById('main-content');
          if (mainContent) {
            if (window.innerWidth < 768) {
              const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-bottom') || '0px';
              mainContent.style.paddingBottom = `calc(5rem + ${safeAreaBottom})`;
              mainContent.classList.add('mb-20');
              mainContent.classList.remove('md:mb-0');
            } else {
              mainContent.style.paddingBottom = '0';
              mainContent.classList.remove('mb-20');
              mainContent.classList.add('md:mb-0');
            }
          }
        });
      });
    </script>
    
    <style>
      /* Ensure proper safe area handling */
      :root {
        --safe-area-inset-bottom: env(safe-area-inset-bottom, 0px);
      }
      
      /* Mobile navigation spacing */
      @media (max-width: 767px) {
        body {
          padding-bottom: env(safe-area-inset-bottom, 0.5rem);
        }
      }
      
      /* Smooth transitions for theme changes */
      * {
        transition-property: background-color, border-color, color, fill, stroke;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 200ms;
      }
      
      /* Focus management for accessibility */
      .skip-to-content {
        position: absolute;
        top: -40px;
        left: 6px;
        background: #3b82f6;
        color: white;
        padding: 8px;
        border-radius: 4px;
        text-decoration: none;
        font-weight: 600;
        z-index: 100;
        transition: top 0.3s;
      }
      
      .skip-to-content:focus {
        top: 6px;
      }
      
      /* Ensure main content is accessible */
      #main-content:focus {
        outline: none;
      }
      
      /* Mobile bottom navigation enhancements */
      @supports (backdrop-filter: blur(12px)) {
        .mobile-nav {
          backdrop-filter: blur(12px);
        }
      }
    </style>
  </body>
</html>