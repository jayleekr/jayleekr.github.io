---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import RelatedPosts from '../components/RelatedPosts.astro';
import ReadingTime from '../components/ReadingTime.astro';
import SocialShare from '../components/SocialShare.astro';
import Comments from '../components/Comments.astro';
import Newsletter from '../components/Newsletter.astro';
import TableOfContents from '../components/TableOfContents.astro';
import { getLangFromUrl } from '../utils/i18n';

type Props = CollectionEntry<'blog'>['data'] & {
	categories?: string[];
	tags?: string[];
	lang?: 'ko' | 'en';
	content?: string;
};

const { title, description, pubDate, updatedDate, heroImage, categories, tags, lang = 'ko', content = '' } = Astro.props;

// Convert heroImage to string if it's an object
const heroImageSrc = typeof heroImage === 'string' ? heroImage : heroImage?.src;

// Get current language from URL
const currentLang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={currentLang}>
	<head>
		<BaseHead title={title} description={description} image={heroImageSrc} />
	</head>

	<body class="bg-white dark:bg-gray-900 transition-colors duration-300" data-categories={categories ? JSON.stringify(categories) : '[]'}>
		<Header />
		
		<!-- Progress Bar -->
		<div class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-800 z-50">
			<div id="reading-progress-bar" class="h-full bg-primary-600 dark:bg-primary-500 transition-all duration-300 ease-out" style="width: 0%"></div>
		</div>
		
		<main id="main-content" class="min-h-screen">
			<!-- Hero Section -->
			{heroImageSrc && (
				<div class="relative">
					<div class="aspect-[21/9] max-h-[500px] overflow-hidden">
						<img 
							src={heroImageSrc} 
							alt={title}
							class="w-full h-full object-cover"
						/>
						<div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
					</div>
				</div>
			)}
			
			<!-- Content Container -->
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12">
				<!-- Floating TOC Button (Mobile) -->
				<button 
					id="toc-toggle-mobile" 
					class="fixed bottom-6 right-6 lg:hidden z-40 w-14 h-14 bg-primary-600 hover:bg-primary-700 text-white rounded-full shadow-lg transition-all duration-300 flex items-center justify-center"
					aria-label="Toggle table of contents"
				>
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
					</svg>
				</button>
				
				<!-- Table of Contents Overlay (Mobile) -->
				<div id="toc-overlay-mobile" class="fixed inset-0 bg-black/50 z-30 lg:hidden hidden">
					<div class="fixed right-0 top-0 h-full w-80 max-w-[80vw] bg-white dark:bg-gray-900 shadow-xl transform translate-x-full transition-transform duration-300">
						<div class="p-6">
							<div class="flex items-center justify-between mb-6">
								<h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">
									{currentLang === 'ko' ? '목차' : 'Table of Contents'}
								</h3>
								<button id="toc-close-mobile" class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
									<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
									</svg>
								</button>
							</div>
							<TableOfContents 
								content={content}
								maxDepth={3}
								showNumbers={false}
								className=""
							/>
						</div>
					</div>
				</div>
				
				<!-- Desktop Layout Grid (XL and above) -->
				<div class="hidden xl:block blog-layout-grid">
					<!-- Left TOC -->
					<aside class="sticky top-8">
						<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-lg border border-gray-200 dark:border-gray-700 p-4 max-h-[80vh] overflow-y-auto">
							<TableOfContents 
								content={content}
								maxDepth={3}
								showNumbers={false}
								className=""
							/>
						</div>
					</aside>
					
					<!-- Main Content - Desktop -->
					<main class="min-w-0 py-16">
						<!-- Article Header -->
						<header class="mb-16">
							<!-- Meta Information -->
							<div class="flex flex-wrap items-center gap-3 text-sm text-gray-500 dark:text-gray-400 mb-8 font-medium">
								<FormattedDate date={pubDate} />
								{content && (
									<>
										<span class="text-gray-300 dark:text-gray-600">•</span>
										<ReadingTime content={content} />
									</>
								)}
								{updatedDate && (
									<>
										<span class="text-gray-300 dark:text-gray-600">•</span>
										<span>Updated: <FormattedDate date={updatedDate} /></span>
									</>
								)}
								{lang && (
									<>
										<span class="text-gray-300 dark:text-gray-600">•</span>
										<span class="px-2.5 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-xs font-semibold uppercase tracking-wide">
											{lang}
										</span>
									</>
								)}
							</div>
							
							<!-- Title -->
							<h1 class="text-4xl md:text-5xl font-extrabold leading-tight tracking-tight text-gray-900 dark:text-gray-100 mb-6">
								{title}
							</h1>
							
							<!-- Description -->
							{description && (
								<p class="text-xl leading-relaxed text-gray-600 dark:text-gray-300 mb-10 font-light">
									{description}
								</p>
							)}
							
							<!-- Categories and Tags -->
							{(categories || tags) && (
								<div class="space-y-4">
									{categories && categories.length > 0 && (
										<div class="flex flex-wrap items-center gap-3">
											<span class="text-sm font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider">Categories</span>
											{categories.map((category) => (
												<span class="px-4 py-2 bg-primary-50 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 rounded-lg text-sm font-medium border border-primary-200 dark:border-primary-800 hover:bg-primary-100 dark:hover:bg-primary-900/50 transition-colors">
													{category}
												</span>
											))}
										</div>
									)}
									
									{tags && tags.length > 0 && (
										<div class="flex flex-wrap items-center gap-3">
											<span class="text-sm font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider">Tags</span>
											{tags.map((tag) => (
												<span class="px-3 py-1.5 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-md text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
													#{tag}
												</span>
											))}
										</div>
									)}
								</div>
							)}
						</header>
						
						<!-- Article Content with optimal reading width -->
						<article class="prose prose-lg dark:prose-invert mx-auto max-w-prose prose-headings:font-bold prose-headings:tracking-tight prose-h1:text-4xl prose-h2:text-3xl prose-h3:text-2xl prose-h4:text-xl prose-p:leading-relaxed prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-a:text-primary-600 dark:prose-a:text-primary-400 prose-a:font-medium prose-strong:text-gray-900 dark:prose-strong:text-gray-100 prose-code:bg-gray-100 dark:prose-code:bg-gray-800 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded prose-code:text-sm prose-code:font-medium prose-pre:bg-gray-900 dark:prose-pre:bg-gray-950 prose-pre:border prose-pre:border-gray-200 dark:prose-pre:border-gray-800 prose-blockquote:border-l-4 prose-blockquote:border-primary-500 prose-blockquote:bg-gray-50 dark:prose-blockquote:bg-gray-800/50 prose-blockquote:px-6 prose-blockquote:py-4 prose-blockquote:my-8">
							<slot />
						</article>
						
						<!-- Social Share -->
						<div class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700 max-w-prose mx-auto">
							<div class="text-center mb-6">
								<h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">Share this article</h3>
								<p class="text-sm text-gray-600 dark:text-gray-400">Found this helpful? Share it with your network</p>
							</div>
							<SocialShare 
								title={title}
								description={description || ''}
								url={Astro.url.pathname}
								hashtags={tags || []}
								showLabels={true}
							/>
						</div>
					
						<!-- Related Posts -->
						<div class="mt-16 max-w-prose mx-auto">
							<RelatedPosts 
								currentPostId={Astro.params.slug || ''}
								currentCategories={categories}
								currentTags={tags}
								maxPosts={3}
							/>
						</div>
					
						<!-- Newsletter Subscription -->
						<div class="mt-20 mb-16 max-w-prose mx-auto">
							<div class="bg-gradient-to-r from-primary-50 to-blue-50 dark:from-primary-900/20 dark:to-blue-900/20 rounded-2xl p-8 border border-primary-100 dark:border-primary-800">
								<Newsletter variant="inline" />
							</div>
						</div>
					
						<!-- Comments Section -->
						<div class="mt-16 max-w-prose mx-auto">
							<div class="text-center mb-8">
								<h3 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">Join the Discussion</h3>
								<p class="text-gray-600 dark:text-gray-400">Share your thoughts and connect with other readers</p>
							</div>
							<Comments />
						</div>
					
						<!-- Article Footer -->
						<footer class="mt-20 pt-12 border-t border-gray-200 dark:border-gray-700 max-w-prose mx-auto">
							<div class="flex flex-col sm:flex-row justify-between items-center gap-6">
								<a 
									href="/blog" 
									class="inline-flex items-center gap-3 px-6 py-3 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg font-medium transition-all duration-200 hover:scale-105"
								>
									<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
									</svg>
									Back to Blog
								</a>
								
								<div class="flex items-center gap-6">
									<button 
										onclick="window.scrollTo({top: 0, behavior: 'smooth'})"
										class="inline-flex items-center gap-2 px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors font-medium"
									>
										<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
										</svg>
										Back to top
									</button>
								</div>
							</div>
						</footer>
					</main>
					
					<!-- Right Sidebar (for future use) -->
					<aside class="sticky top-8">
						<div class="space-y-4">
							<!-- Reading progress or related links can go here -->
						</div>
					</aside>
				</div>
				
				<!-- Mobile/Tablet Layout (below XL) -->
				<main class="xl:hidden py-16">
					<!-- Article Header -->
					<header class="mb-16 max-w-3xl mx-auto">
						<!-- Meta Information -->
						<div class="flex flex-wrap items-center gap-3 text-sm text-gray-500 dark:text-gray-400 mb-8 font-medium">
							<FormattedDate date={pubDate} />
							{content && (
								<>
									<span class="text-gray-300 dark:text-gray-600">•</span>
									<ReadingTime content={content} />
								</>
							)}
							{updatedDate && (
								<>
									<span class="text-gray-300 dark:text-gray-600">•</span>
									<span>Updated: <FormattedDate date={updatedDate} /></span>
								</>
							)}
							{lang && (
								<>
									<span class="text-gray-300 dark:text-gray-600">•</span>
									<span class="px-2.5 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-xs font-semibold uppercase tracking-wide">
										{lang}
									</span>
								</>
							)}
						</div>
						
						<!-- Title -->
						<h1 class="text-4xl md:text-5xl lg:text-6xl font-extrabold leading-tight tracking-tight text-gray-900 dark:text-gray-100 mb-6">
							{title}
						</h1>
						
						<!-- Description -->
						{description && (
							<p class="text-xl md:text-2xl leading-relaxed text-gray-600 dark:text-gray-300 mb-10 font-light">
								{description}
							</p>
						)}
						
						<!-- Categories and Tags -->
						{(categories || tags) && (
							<div class="space-y-4">
								{categories && categories.length > 0 && (
									<div class="flex flex-wrap items-center gap-3">
										<span class="text-sm font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider">Categories</span>
										{categories.map((category) => (
											<span class="px-4 py-2 bg-primary-50 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 rounded-lg text-sm font-medium border border-primary-200 dark:border-primary-800 hover:bg-primary-100 dark:hover:bg-primary-900/50 transition-colors">
												{category}
											</span>
										))}
									</div>
								)}
								
								{tags && tags.length > 0 && (
									<div class="flex flex-wrap items-center gap-3">
										<span class="text-sm font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider">Tags</span>
										{tags.map((tag) => (
											<span class="px-3 py-1.5 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-md text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
												#{tag}
											</span>
										))}
									</div>
								)}
							</div>
						)}
					</header>
					
					<!-- Article Content with optimal reading width -->
					<article class="prose prose-lg md:prose-xl dark:prose-invert max-w-prose mx-auto prose-headings:font-bold prose-headings:tracking-tight prose-h1:text-4xl prose-h2:text-3xl prose-h3:text-2xl prose-h4:text-xl prose-p:leading-relaxed prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-a:text-primary-600 dark:prose-a:text-primary-400 prose-a:font-medium prose-strong:text-gray-900 dark:prose-strong:text-gray-100 prose-code:bg-gray-100 dark:prose-code:bg-gray-800 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded prose-code:text-sm prose-code:font-medium prose-pre:bg-gray-900 dark:prose-pre:bg-gray-950 prose-pre:border prose-pre:border-gray-200 dark:prose-pre:border-gray-800 prose-blockquote:border-l-4 prose-blockquote:border-primary-500 prose-blockquote:bg-gray-50 dark:prose-blockquote:bg-gray-800/50 prose-blockquote:px-6 prose-blockquote:py-4 prose-blockquote:my-8">
						<slot />
					</article>
				
					<!-- Social Share -->
					<div class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700 max-w-prose mx-auto">
						<div class="text-center mb-6">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">Share this article</h3>
							<p class="text-sm text-gray-600 dark:text-gray-400">Found this helpful? Share it with your network</p>
						</div>
						<SocialShare 
							title={title}
							description={description || ''}
							url={Astro.url.pathname}
							hashtags={tags || []}
							showLabels={true}
						/>
					</div>
				
					<!-- Related Posts -->
					<div class="mt-16 max-w-prose mx-auto">
						<RelatedPosts 
							currentPostId={Astro.params.slug || ''}
							currentCategories={categories}
							currentTags={tags}
							maxPosts={3}
						/>
					</div>
				
					<!-- Newsletter Subscription -->
					<div class="mt-20 mb-16 max-w-prose mx-auto">
						<div class="bg-gradient-to-r from-primary-50 to-blue-50 dark:from-primary-900/20 dark:to-blue-900/20 rounded-2xl p-8 border border-primary-100 dark:border-primary-800">
							<Newsletter variant="inline" />
						</div>
					</div>
				
					<!-- Comments Section -->
					<div class="mt-16 max-w-prose mx-auto">
						<div class="text-center mb-8">
							<h3 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">Join the Discussion</h3>
							<p class="text-gray-600 dark:text-gray-400">Share your thoughts and connect with other readers</p>
						</div>
						<Comments />
					</div>
				
					<!-- Article Footer -->
					<footer class="mt-20 pt-12 border-t border-gray-200 dark:border-gray-700 max-w-prose mx-auto">
						<div class="flex flex-col sm:flex-row justify-between items-center gap-6">
							<a 
								href="/blog" 
								class="inline-flex items-center gap-3 px-6 py-3 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg font-medium transition-all duration-200 hover:scale-105"
							>
								<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
								</svg>
								Back to Blog
							</a>
							
							<div class="flex items-center gap-6">
								<button 
									onclick="window.scrollTo({top: 0, behavior: 'smooth'})"
									class="inline-flex items-center gap-2 px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors font-medium"
								>
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
									</svg>
									Back to top
								</button>
							</div>
						</div>
					</footer>
				</article>
		</div>
		</main>
		<Footer />
		
		<!-- Mermaid Script -->
		<script type="module">
			import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
			
			// Theme configuration for light and dark modes
			const lightTheme = {
				theme: 'default',
				themeVariables: {
					primaryColor: '#3b82f6',
					primaryTextColor: '#1f2937',
					primaryBorderColor: '#d1d5db',
					lineColor: '#6b7280',
					sectionBkgColor: '#f9fafb',
					altSectionBkgColor: '#ffffff',
					gridColor: '#e5e7eb',
					secondaryColor: '#f3f4f6',
					tertiaryColor: '#ffffff'
				}
			};

			const darkTheme = {
				theme: 'dark',
				themeVariables: {
					primaryColor: '#60a5fa',
					primaryTextColor: '#f9fafb',
					primaryBorderColor: '#4b5563',
					lineColor: '#9ca3af',
					sectionBkgColor: '#1f2937',
					altSectionBkgColor: '#111827',
					gridColor: '#374151',
					secondaryColor: '#374151',
					tertiaryColor: '#1f2937'
				}
			};

			function getCurrentTheme() {
				return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
			}

			function initializeMermaid() {
				const currentTheme = getCurrentTheme();
				const themeConfig = currentTheme === 'dark' ? darkTheme : lightTheme;
				
				mermaid.initialize({
					startOnLoad: false,
					theme: themeConfig.theme,
					themeVariables: themeConfig.themeVariables,
					fontFamily: 'Inter, system-ui, sans-serif',
					fontSize: 14,
					logLevel: 'error',
					securityLevel: 'sandbox',
					flowchart: {
						htmlLabels: true,
						useMaxWidth: true,
						diagramPadding: 8
					},
					sequence: {
						diagramMarginX: 50,
						diagramMarginY: 10,
						actorMargin: 50,
						width: 150,
						height: 65,
						boxMargin: 10,
						boxTextMargin: 5,
						noteMargin: 10,
						messageMargin: 35,
						mirrorActors: true,
						bottomMarginAdj: 1,
						useMaxWidth: true,
						rightAngles: false,
						showSequenceNumbers: false
					},
					gantt: {
						numberSectionStyles: 4,
						axisFormat: '%m/%d/%Y',
						topAxis: false
					}
				});
			}

			function renderMermaidDiagrams() {
				// Find all code blocks with mermaid content - check multiple selectors
				const codeBlocks = document.querySelectorAll('pre code.language-mermaid, pre code[class*="mermaid"], pre code');
				console.log(`Found ${codeBlocks.length} code blocks to check for Mermaid`);
				
				codeBlocks.forEach(async (codeBlock) => {
					const preElement = codeBlock.parentElement;
					if (!preElement) return;
					
					const content = codeBlock.textContent || '';
					const className = codeBlock.className || '';
					
					// Check if this is a mermaid diagram by class name or content
					const isMermaidByClass = className.includes('mermaid') || className.includes('language-mermaid');
					const isMermaidByContent = content.trim().match(/^(graph|flowchart|sequenceDiagram|classDiagram|stateDiagram|erDiagram|journey|gantt|pie|gitgraph)/);
					
					console.log(`Code block - class: "${className}", content start: "${content.trim().substring(0, 50)}...", isMermaid: ${isMermaidByClass || isMermaidByContent}`);
					
					if (isMermaidByClass || isMermaidByContent) {
						try {
							// Create a new mermaid container
							const mermaidContainer = document.createElement('div');
							mermaidContainer.className = 'mermaid-diagram my-8 flex justify-center';
							mermaidContainer.id = `mermaid-${Math.random().toString(36).substring(2, 11)}`;
							mermaidContainer.style.background = 'transparent';
							
							// Render the diagram
							const { svg } = await mermaid.render(mermaidContainer.id + '-svg', content);
							mermaidContainer.innerHTML = svg;
							
							// Apply responsive styles
							const svgElement = mermaidContainer.querySelector('svg');
							if (svgElement) {
								svgElement.style.maxWidth = '100%';
								svgElement.style.height = 'auto';
								svgElement.removeAttribute('width');
								svgElement.removeAttribute('height');
							}
							
							// Replace the pre element with the mermaid container
							preElement.parentNode?.replaceChild(mermaidContainer, preElement);
						} catch (error) {
							console.error('Error rendering Mermaid diagram:', error);
							const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
							const errorDiv = document.createElement('div');
							errorDiv.className = 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4 text-red-700 dark:text-red-400 my-8';
							errorDiv.innerHTML = `
								<p class="font-medium">Error rendering diagram</p>
								<p class="text-sm mt-1">${errorMessage}</p>
							`;
							preElement.parentNode?.replaceChild(errorDiv, preElement);
						}
					}
				});
			}

			function handleThemeChange() {
				// Re-initialize and re-render when theme changes
				initializeMermaid();
				renderMermaidDiagrams();
			}

			// Initialize on page load
			document.addEventListener('DOMContentLoaded', () => {
				initializeMermaid();
				renderMermaidDiagrams();
			});

			// Listen for theme changes
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
						const target = mutation.target;
						if (target === document.documentElement) {
							handleThemeChange();
						}
					}
				});
			});

			observer.observe(document.documentElement, {
				attributes: true,
				attributeFilter: ['class']
			});

			// Clean up observer when page unloads
			window.addEventListener('beforeunload', () => {
				observer.disconnect();
			});
		</script>

		<!-- Reading Progress and Mobile TOC Scripts -->
		<script is:inline>
			// Reading progress bar
			function updateReadingProgress() {
				const article = document.getElementById('main-content');
				const progressBar = document.getElementById('reading-progress-bar');
				
				if (!article || !progressBar) return;
				
				const articleTop = article.offsetTop;
				const articleHeight = article.offsetHeight;
				const windowTop = window.pageYOffset;
				const windowHeight = window.innerHeight;
				
				const progress = Math.min(
					Math.max((windowTop - articleTop + windowHeight * 0.1) / (articleHeight - windowHeight * 0.8), 0),
					1
				);
				
				progressBar.style.width = `${progress * 100}%`;
			}
			
			// Mobile TOC functionality
			function initMobileTOC() {
				const toggleBtn = document.getElementById('toc-toggle-mobile');
				const overlay = document.getElementById('toc-overlay-mobile');
				const closeBtn = document.getElementById('toc-close-mobile');
				const sidebar = overlay?.querySelector('.fixed');
				
				if (!toggleBtn || !overlay || !closeBtn || !sidebar) return;
				
				function openTOC() {
					overlay.classList.remove('hidden');
					document.body.style.overflow = 'hidden';
					setTimeout(() => {
						sidebar.classList.remove('translate-x-full');
					}, 10);
				}
				
				function closeTOC() {
					sidebar.classList.add('translate-x-full');
					document.body.style.overflow = '';
					setTimeout(() => {
						overlay.classList.add('hidden');
					}, 300);
				}
				
				toggleBtn.addEventListener('click', openTOC);
				closeBtn.addEventListener('click', closeTOC);
				overlay.addEventListener('click', (e) => {
					if (e.target === overlay) closeTOC();
				});
				
				// Close on escape key
				document.addEventListener('keydown', (e) => {
					if (e.key === 'Escape' && !overlay.classList.contains('hidden')) {
						closeTOC();
					}
				});
			}
			
			// Legacy Mermaid processing function (now handled by CDN script above)
			function processMermaidDiagrams() {
				// No longer needed - Mermaid processing is handled by the CDN script above
			}
			
			// Initialize on page load
			document.addEventListener('DOMContentLoaded', () => {
				updateReadingProgress();
				initMobileTOC();
				processMermaidDiagrams();
			});
			
			// Update progress on scroll
			window.addEventListener('scroll', updateReadingProgress, { passive: true });
		</script>
	</body>
</html>