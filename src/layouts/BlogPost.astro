---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import RelatedPosts from '../components/RelatedPosts.astro';
import ReadingTime from '../components/ReadingTime.astro';
import SocialShare from '../components/SocialShare.astro';
import Comments from '../components/Comments.astro';
import Newsletter from '../components/Newsletter.astro';
import EnhancedTOC from '../components/EnhancedTOC.astro';
import ReadingProgress from '../components/ReadingProgress.astro';
import WhimsyEnhancer from '../components/WhimsyEnhancer.astro';
import CommandPalette from '../components/CommandPalette.astro';
import LoadingStates from '../components/LoadingStates.astro';
import { getLangFromUrl } from '../utils/i18n';
import '../styles/blog-layout.css';

type Props = CollectionEntry<'blog'>['data'] & {
	categories?: string[];
	tags?: string[];
	lang?: 'ko' | 'en';
	content?: string;
};

const { title, description, pubDate, updatedDate, heroImage, categories, tags, lang = 'ko', content = '' } = Astro.props;

// Convert heroImage to string if it's an object
const heroImageSrc = typeof heroImage === 'string' ? heroImage : heroImage?.src;

// Get current language from URL
const currentLang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={currentLang}>
	<head>
		<BaseHead title={title} description={description} image={heroImageSrc} />
	</head>

	<body class="bg-white dark:bg-gray-900 transition-colors duration-300">
		<!-- Whimsy Components -->
		<WhimsyEnhancer />
		<CommandPalette />
		<LoadingStates />
		
		<Header />
		
		<ReadingProgress />
		
		<main id="main-content" class="min-h-screen flex flex-col items-center">
			<!-- Hero Image (if exists) -->
			{heroImageSrc && (
				<div class="relative w-full max-w-7xl mx-auto">
					<div class="aspect-[21/9] max-h-[400px] 2xl:max-h-[500px] 4xl:max-h-[600px] overflow-hidden rounded-none 2xl:rounded-2xl">
						<img 
							src={heroImageSrc} 
							alt={title}
							class="w-full h-full object-cover"
						/>
						<div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
					</div>
				</div>
			)}
			
			<!-- Article Container -->
			<div class="article-container w-full">
				<!-- Main Article Content -->
				<article class="article-content">
					<!-- Article Header -->
					<header class="article-header">
						<!-- Meta Information -->
						<div class="article-meta">
							<FormattedDate date={pubDate} />
							{content && (
								<>
									<span class="meta-separator">•</span>
									<ReadingTime content={content} />
								</>
							)}
							{updatedDate && (
								<>
									<span class="meta-separator">•</span>
									<span>{currentLang === 'ko' ? '수정됨' : 'Updated'}: <FormattedDate date={updatedDate} /></span>
								</>
							)}
							{lang && (
								<>
									<span class="meta-separator">•</span>
									<span class="lang-badge">{lang}</span>
								</>
							)}
						</div>
						
						<!-- Title -->
						<h1 class="article-title">{title}</h1>
						
						<!-- Description -->
						{description && (
							<p class="article-description">{description}</p>
						)}
						
						<!-- Categories and Tags -->
						{(categories || tags) && (
							<div class="article-taxonomy">
								{categories && categories.length > 0 && (
									<div class="categories-section">
										<span class="taxonomy-label">{currentLang === 'ko' ? '카테고리' : 'Categories'}</span>
										<div class="taxonomy-items">
											{categories.map((category) => (
												<a href={`/blog?category=${category}`} class="category-badge">
													{category}
												</a>
											))}
										</div>
									</div>
								)}
								
								{tags && tags.length > 0 && (
									<div class="tags-section">
										<span class="taxonomy-label">{currentLang === 'ko' ? '태그' : 'Tags'}</span>
										<div class="taxonomy-items">
											{tags.map((tag) => (
												<a href={`/blog?tag=${tag}`} class="tag-badge">
													#{tag}
												</a>
											))}
										</div>
									</div>
								)}
							</div>
						)}
					</header>
					
					<!-- Article Content -->
					<div class="prose-container">
						<slot />
					</div>
					
					<!-- Article Footer -->
					<footer class="article-footer">
						<!-- Social Share -->
						<div class="social-share-section">
							<h3>{currentLang === 'ko' ? '이 글 공유하기' : 'Share this article'}</h3>
							<p>{currentLang === 'ko' ? '도움이 되셨나요? 다른 분들께도 공유해주세요' : 'Found this helpful? Share it with your network'}</p>
							<SocialShare 
								title={title}
								description={description || ''}
								url={Astro.url.pathname}
								hashtags={tags || []}
								showLabels={true}
							/>
						</div>
						
						<!-- Related Posts -->
						<RelatedPosts 
							currentPostId={Astro.params.slug || ''}
							currentCategories={categories}
							currentTags={tags}
							maxPosts={3}
						/>
						
						<!-- Newsletter -->
						<div class="mt-12 mb-12">
							<div class="bg-gradient-to-r from-primary-50 to-blue-50 dark:from-primary-900/20 dark:to-blue-900/20 rounded-2xl p-8 border border-primary-100 dark:border-primary-800">
								<Newsletter variant="inline" />
							</div>
						</div>
						
						<!-- Comments -->
						<div class="mt-12">
							<div class="text-center mb-8">
								<h3 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
									{currentLang === 'ko' ? '댓글 남기기' : 'Join the Discussion'}
								</h3>
								<p class="text-gray-600 dark:text-gray-400">
									{currentLang === 'ko' ? '여러분의 생각을 들려주세요' : 'Share your thoughts and connect with other readers'}
								</p>
							</div>
							<Comments />
						</div>
						
						<!-- Navigation -->
						<div class="mt-16 flex flex-col sm:flex-row justify-between items-center gap-6">
							<a href="/blog" class="back-to-blog">
								<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
								</svg>
								{currentLang === 'ko' ? '블로그로 돌아가기' : 'Back to Blog'}
							</a>
							
							<button onclick="window.scrollTo({top: 0, behavior: 'smooth'})" class="scroll-to-top">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
								</svg>
								{currentLang === 'ko' ? '맨 위로' : 'Back to top'}
							</button>
						</div>
					</footer>
				</article>
				
				<!-- Desktop TOC Sidebar -->
				<aside class="toc-sidebar">
					<h3 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">
						{currentLang === 'ko' ? '목차' : 'Table of Contents'}
					</h3>
					<EnhancedTOC 
						content={content}
						maxDepth={3}
						showNumbers={false}
						className=""
					/>
				</aside>
			</div>
			
			<!-- Mobile TOC Toggle -->
			<button 
				id="mobile-toc-toggle"
				class="mobile-toc-toggle"
				aria-label="Toggle table of contents"
			>
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16"/>
				</svg>
			</button>
			
			<!-- Mobile TOC Drawer -->
			<div id="mobile-toc-drawer" class="mobile-toc-drawer">
				<div class="mobile-toc-content">
					<div class="mobile-toc-header">
						<h3>{currentLang === 'ko' ? '목차' : 'Table of Contents'}</h3>
						<button id="mobile-toc-close" aria-label="Close table of contents">
							<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
							</svg>
						</button>
					</div>
					<EnhancedTOC 
						content={content}
						maxDepth={3}
						showNumbers={false}
						className=""
					/>
				</div>
			</div>
		</main>
		
		<Footer />
		
		<!-- Mobile TOC JavaScript -->
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const toggleBtn = document.getElementById('mobile-toc-toggle');
				const drawer = document.getElementById('mobile-toc-drawer');
				const closeBtn = document.getElementById('mobile-toc-close');
				
				if (toggleBtn && drawer && closeBtn) {
					// Open drawer
					toggleBtn.addEventListener('click', () => {
						drawer.classList.add('open');
						document.body.style.overflow = 'hidden';
					});
					
					// Close drawer
					const closeDrawer = () => {
						drawer.classList.remove('open');
						document.body.style.overflow = '';
					};
					
					closeBtn.addEventListener('click', closeDrawer);
					
					// Close on backdrop click
					drawer.addEventListener('click', (e) => {
						if (e.target === drawer) {
							closeDrawer();
						}
					});
					
					// Close on escape key
					document.addEventListener('keydown', (e) => {
						if (e.key === 'Escape' && drawer.classList.contains('open')) {
							closeDrawer();
						}
					});
				}
			});
		</script>
		
		<!-- Mermaid Script -->
		<script type="module">
			import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
			
			// Theme configuration for light and dark modes
			const lightTheme = {
				theme: 'default',
				themeVariables: {
					primaryColor: '#3b82f6',
					primaryTextColor: '#111827',
					primaryBorderColor: '#9ca3af',
					lineColor: '#4b5563',
					sectionBkgColor: '#f9fafb',
					altSectionBkgColor: '#ffffff',
					gridColor: '#d1d5db',
					secondaryColor: '#e5e7eb',
					tertiaryColor: '#ffffff',
					fontFamily: 'Inter, system-ui, sans-serif'
				}
			};

			const darkTheme = {
				theme: 'dark',
				themeVariables: {
					primaryColor: '#60a5fa',
					primaryTextColor: '#f9fafb',
					primaryBorderColor: '#6b7280',
					lineColor: '#d1d5db',
					sectionBkgColor: '#1f2937',
					altSectionBkgColor: '#111827',
					gridColor: '#4b5563',
					secondaryColor: '#374151',
					tertiaryColor: '#1f2937',
					fontFamily: 'Inter, system-ui, sans-serif'
				}
			};

			function getCurrentTheme() {
				return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
			}

			function initializeMermaid() {
				const currentTheme = getCurrentTheme();
				const themeConfig = currentTheme === 'dark' ? darkTheme : lightTheme;
				
				mermaid.initialize({
					startOnLoad: false,
					theme: themeConfig.theme,
					themeVariables: themeConfig.themeVariables,
					fontFamily: 'Inter, system-ui, sans-serif',
					fontSize: 14,
					logLevel: 'error',
					securityLevel: 'sandbox',
					flowchart: {
						htmlLabels: true,
						useMaxWidth: true,
						rankSpacing: 50,
						nodeSpacing: 30,
						curve: 'basis'
					}
				});

				// Find and render all mermaid diagrams
				const mermaidElements = document.querySelectorAll('.mermaid');
				if (mermaidElements.length > 0) {
					mermaid.run({
						querySelector: '.mermaid'
					}).catch(console.error);
				}
			}

			// Initialize on load
			initializeMermaid();

			// Re-initialize on theme change
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
						// Clear existing mermaid state
						const mermaidElements = document.querySelectorAll('.mermaid[data-processed="true"]');
						mermaidElements.forEach(el => {
							el.removeAttribute('data-processed');
							el.innerHTML = el.getAttribute('data-mermaid-original') || el.innerHTML;
						});
						
						// Re-initialize with new theme
						initializeMermaid();
					}
				});
			});

			observer.observe(document.documentElement, {
				attributes: true,
				attributeFilter: ['class']
			});

			// Store original mermaid content
			document.querySelectorAll('.mermaid').forEach(el => {
				el.setAttribute('data-mermaid-original', el.innerHTML);
			});
		</script>
	</body>
</html>