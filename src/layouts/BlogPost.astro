---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { getLangFromUrl, t } from '../utils/i18n';

type Props = CollectionEntry<'blog'>['data'] & {
	categories?: string[];
	tags?: string[];
	lang?: 'ko' | 'en';
};

const { title, description, pubDate, updatedDate, heroImage, categories, tags, lang = 'ko' } = Astro.props;

// Convert heroImage to string if it's an object
const heroImageSrc = typeof heroImage === 'string' ? heroImage : heroImage?.src;

// Get current language from URL
const currentLang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={currentLang}>
	<head>
		<BaseHead title={title} description={description} image={heroImageSrc} />
	</head>

	<body>
		<Header />
		<main id="main-content">
			<article class="max-w-4xl mx-auto py-8">
				{heroImageSrc && (
					<div class="mb-8">
						<img 
							src={heroImageSrc} 
							alt={title}
							class="w-full h-64 object-cover rounded-xl"
						/>
					</div>
				)}
				
				<header class="mb-8">
					<div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-4">
						<FormattedDate date={pubDate} />
						{updatedDate && (
							<>
								<span>•</span>
								<span>Updated: <FormattedDate date={updatedDate} /></span>
							</>
						)}
						{lang && (
							<>
								<span>•</span>
								<span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-xs">
									{lang.toUpperCase()}
								</span>
							</>
						)}
					</div>
					
					<h1 class="text-4xl font-bold mb-4">{title}</h1>
					
					{description && (
						<p class="text-xl text-gray-600 dark:text-gray-300 mb-6">
							{description}
						</p>
					)}
					
					{(categories || tags) && (
						<div class="flex flex-wrap gap-4">
							{categories && categories.length > 0 && (
								<div class="flex items-center gap-2">
									<span class="text-sm font-medium text-gray-500 dark:text-gray-400">Categories:</span>
									<div class="flex gap-2">
										{categories.map((category) => (
											<span class="px-3 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full text-sm">
												{category}
											</span>
										))}
									</div>
								</div>
							)}
							
							{tags && tags.length > 0 && (
								<div class="flex items-center gap-2">
									<span class="text-sm font-medium text-gray-500 dark:text-gray-400">Tags:</span>
									<div class="flex gap-2">
										{tags.map((tag) => (
											<span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full text-sm">
												{tag}
											</span>
										))}
									</div>
								</div>
							)}
						</div>
					)}
				</header>
				
				<div class="prose prose-lg dark:prose-invert max-w-none">
					<slot />
				</div>
				
				<footer class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
					<div class="flex justify-between items-center">
						<a 
							href="/blog" 
							class="inline-flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 transition-colors"
						>
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
							</svg>
							Back to Blog
						</a>
						
						<div class="flex items-center gap-4">
							<button 
								onclick="window.scrollTo({top: 0, behavior: 'smooth'})"
								class="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
							>
								Back to top ↑
							</button>
						</div>
					</div>
				</footer>
			</article>
		</main>
		<Footer />
	</body>
</html>