---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { t } from '../../utils/i18n';

const lang = 'en';
const posts = (await getCollection('blog')).sort(
	(a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang={lang}>
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main id="main-content">
			<!-- Hero Section -->
			<section class="py-20 text-center">
				<div class="max-w-4xl mx-auto">
					<h1 class="text-5xl font-bold mb-6 bg-gradient-to-r from-primary-600 to-primary-800 bg-clip-text text-transparent">
						{t("hero.title", lang)}
					</h1>
					<h2 class="text-2xl text-gray-600 dark:text-gray-300 mb-8">
						{t("hero.subtitle", lang)}
					</h2>
					<p class="text-lg text-gray-700 dark:text-gray-300 max-w-2xl mx-auto mb-10">
						{t("hero.description", lang)}
					</p>
					<div class="flex justify-center gap-4">
						<a 
							href="/en/about" 
							class="px-8 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors font-semibold"
						>
							{t("navigation.about", lang)}
						</a>
						<a 
							href="/blog" 
							class="px-8 py-3 border-2 border-primary-600 text-primary-600 dark:text-primary-400 rounded-lg hover:bg-primary-50 dark:hover:bg-primary-900/20 transition-colors font-semibold"
						>
							{t("common.viewBlog", lang)}
						</a>
					</div>
				</div>
			</section>

			<!-- Skills Section -->
			<section class="py-16 bg-gray-50 dark:bg-gray-800">
				<div class="max-w-4xl mx-auto">
					<h2 class="text-3xl font-bold text-center mb-12">{t("home.skills", lang)}</h2>
					<div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
						<div class="text-center">
							<div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center">
								<svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
								</svg>
							</div>
							<h3 class="font-bold text-lg mb-2">{t("home.skillCategories.frontend", lang)}</h3>
							<p class="text-gray-600 dark:text-gray-400 text-sm">React, Vue, Astro, TypeScript</p>
						</div>
						
						<div class="text-center">
							<div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center">
								<svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2"/>
								</svg>
							</div>
							<h3 class="font-bold text-lg mb-2">{t("home.skillCategories.backend", lang)}</h3>
							<p class="text-gray-600 dark:text-gray-400 text-sm">Node.js, Python, C++, Embedded Linux</p>
						</div>
						
						<div class="text-center">
							<div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center">
								<svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z"/>
								</svg>
							</div>
							<h3 class="font-bold text-lg mb-2">{t("home.skillCategories.devops", lang)}</h3>
							<p class="text-gray-600 dark:text-gray-400 text-sm">Docker, Kubernetes, CI/CD</p>
						</div>
						
						<div class="text-center">
							<div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-orange-400 to-orange-600 rounded-xl flex items-center justify-center">
								<svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
								</svg>
							</div>
							<h3 class="font-bold text-lg mb-2">{t("home.skillCategories.cloud", lang)}</h3>
							<p class="text-gray-600 dark:text-gray-400 text-sm">AWS, Container Orchestration</p>
						</div>
					</div>
				</div>
			</section>

			<!-- Recent Posts Section -->
			<section class="py-16">
				<div class="max-w-4xl mx-auto">
					<div class="flex justify-between items-center mb-12">
						<h2 class="text-3xl font-bold">{t("home.recentPosts", lang)}</h2>
						<a 
							href="/blog" 
							class="text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-semibold"
						>
							{t("common.viewAll", lang)} â†’
						</a>
					</div>
					
					{posts.length > 0 ? (
						<div class="grid gap-8">
							{posts.slice(0, 3).map((post) => (
								<article class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 hover:shadow-md transition-shadow">
									<div class="flex flex-col md:flex-row md:items-center gap-4">
										<div class="flex-1">
											<h3 class="text-xl font-bold mb-2">
												<a 
													href={`/blog/${post.id}/`}
													class="text-gray-900 dark:text-white hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
												>
													{post.data.title}
												</a>
											</h3>
											<p class="text-gray-600 dark:text-gray-400 mb-3">
												{post.data.description}
											</p>
											<div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-500">
												<FormattedDate date={post.data.pubDate} />
												{post.data.tags && post.data.tags.length > 0 && (
													<div class="flex gap-2">
														{post.data.tags.slice(0, 2).map((tag) => (
															<span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full text-xs">
																{tag}
															</span>
														))}
													</div>
												)}
											</div>
										</div>
									</div>
								</article>
							))}
						</div>
					) : (
						<div class="text-center py-12">
							<p class="text-gray-600 dark:text-gray-400 text-lg">{t("blog.noPosts", lang)}</p>
						</div>
					)}
				</div>
			</section>
		</main>
		<Footer />
	</body>
</html>