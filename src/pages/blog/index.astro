---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import ReadingTime from '../../components/ReadingTime.astro';
import { Image } from 'astro:assets';
import { getLangFromUrl, t } from '../../utils/i18n';

const lang = getLangFromUrl(Astro.url);

// Get URL parameters for filtering
const url = Astro.url;
const categoryFilter = url.searchParams.get('category');
const subcategoryFilter = url.searchParams.get('subcategory');
const tagFilter = url.searchParams.get('tag');

let posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Apply filters if present
let filteredPosts = posts;
let filterTitle = '';

if (categoryFilter) {
	filteredPosts = posts.filter(post => {
		const categories = post.data.categories || [];
		const matchesCategory = categories.includes(categoryFilter);
		const matchesSubcategory = !subcategoryFilter || categories.includes(subcategoryFilter);
		return matchesCategory && matchesSubcategory;
	});
	
	if (subcategoryFilter) {
		filterTitle = `${categoryFilter} > ${subcategoryFilter}`;
	} else {
		filterTitle = categoryFilter;
	}
}

if (tagFilter) {
	filteredPosts = posts.filter(post => {
		const tags = post.data.tags || [];
		return tags.includes(tagFilter);
	});
	filterTitle = `#${tagFilter}`;
}

// Extract all unique categories and tags for filter options
const allCategories = [...new Set(posts.flatMap(post => post.data.categories || []))];
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];
---

<!doctype html>
<html lang={lang}>
	<head>
		<BaseHead title={`${t("navigation.blog", lang)} - ${SITE_TITLE}`} description={t("about.description", lang)} />
	</head>
	<body class="min-h-screen bg-gray-50 dark:bg-gray-900">
		<Header />
		<main id="main-content" class="max-w-6xl mx-auto px-4 py-8">
			<section>
				<div class="mb-8">
					<h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100 mb-2">
						{filterTitle ? `${filterTitle} - ${t("navigation.blog", lang)}` : t("navigation.blog", lang)}
					</h1>
					<p class="text-gray-600 dark:text-gray-400">
						{filterTitle 
							? lang === 'ko' ? `${filterTitle} 카테고리의 글들` : `Posts in ${filterTitle}`
							: lang === 'ko' ? '개발과 기술에 대한 경험과 인사이트를 공유합니다' : 'Sharing experiences and insights about development and technology'
						}
					</p>
					
					{filterTitle && (
						<div class="mt-4">
							<a 
								href="/blog"
								class="inline-flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 text-sm font-medium"
							>
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
								</svg>
								{lang === 'ko' ? '모든 글 보기' : 'View all posts'}
							</a>
						</div>
					)}
					
					<div class="mt-4 flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
						<span>
							총 <span id="posts-count">{filteredPosts.length}</span>개의 포스트
						</span>
						{filterTitle && (
							<span>
								(전체 {posts.length}개 중)
							</span>
						)}
					</div>
				</div>

				<!-- Search and Filter Controls -->
				<div class="mb-8 space-y-4">
					<!-- Search -->
					<div class="relative">
						<input 
							type="text" 
							id="search-input"
							placeholder="포스트 검색..."
							class="w-full px-4 py-3 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-primary-500 focus:border-transparent"
						/>
						<svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
						</svg>
					</div>

					<!-- Category and Tag Filters -->
					<div class="flex flex-wrap gap-4">
						<div class="flex flex-wrap gap-2">
							<button class="filter-btn active" data-filter="all">전체</button>
							{allCategories.map((category) => (
								<button class="filter-btn" data-filter={`category:${category}`}>
									{category}
								</button>
							))}
						</div>
						
						{allTags.length > 0 && (
							<div class="flex flex-wrap gap-2">
								<span class="text-sm text-gray-500 dark:text-gray-400 py-2">태그로 필터링:</span>
								{allTags.slice(0, 10).map((tag) => (
									<button class="filter-btn text-sm" data-filter={`tag:${tag}`}>
										#{tag}
									</button>
								))}
							</div>
						)}
					</div>
				</div>

				<!-- Posts Grid -->
				<div id="posts-container" class="grid gap-8">
					{filteredPosts.map((post) => (
						<article class="post-item bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md transition-shadow" 
							data-categories={JSON.stringify(post.data.categories || [])}
							data-tags={JSON.stringify(post.data.tags || [])}
							data-title={post.data.title.toLowerCase()}
							data-description={(post.data.description || '').toLowerCase()}
						>
							<div class="p-6">
								<div class="flex flex-col lg:flex-row lg:items-start gap-6">
									{post.data.heroImage && (
										<div class="lg:w-48 lg:flex-shrink-0">
											{typeof post.data.heroImage === 'string' ? (
												<img 
													src={post.data.heroImage} 
													alt={post.data.title}
													class="w-full h-32 lg:h-24 object-cover rounded-lg"
												/>
											) : (
												<Image 
													src={post.data.heroImage} 
													alt={post.data.title}
													class="w-full h-32 lg:h-24 object-cover rounded-lg"
													width={192}
													height={96}
												/>
											)}
										</div>
									)}
									
									<div class="flex-1">
										<div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-3">
											<FormattedDate date={post.data.pubDate} />
											{post.body && (
												<>
													<span>•</span>
													<ReadingTime content={post.body} showIcon={false} />
												</>
											)}
											{post.data.lang && (
												<>
													<span>•</span>
													<span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-xs">
														{post.data.lang.toUpperCase()}
													</span>
												</>
											)}
										</div>
										
										<h2 class="text-xl lg:text-2xl font-bold mb-3">
											<a 
												href={`/blog/${post.id}/`}
												class="text-gray-900 dark:text-gray-100 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
											>
												{post.data.title}
											</a>
										</h2>
										
										{post.data.description && (
											<p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
												{post.data.description}
											</p>
										)}
										
										<div class="flex flex-wrap gap-2 mb-4">
											{post.data.categories && post.data.categories.map((category) => (
												<span class="px-3 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full text-sm">
													{category}
												</span>
											))}
											{post.data.tags && post.data.tags.slice(0, 3).map((tag) => (
												<span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full text-sm">
													#{tag}
												</span>
											))}
										</div>
										
										<a 
											href={`/blog/${post.id}/`}
											class="inline-flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium transition-colors"
										>
											계속 읽기
											<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
											</svg>
										</a>
									</div>
								</div>
							</div>
						</article>
					))}
				</div>
				
				{filteredPosts.length === 0 && (
					<div class="text-center py-12">
						<p class="text-gray-500 dark:text-gray-400 text-lg">{t('blog.noPosts', lang)}</p>
					</div>
				)}

				<!-- No Results Message (Hidden by default) -->
				<div id="no-results" class="text-center py-12 hidden">
					<div class="max-w-md mx-auto">
						<svg class="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
						</svg>
						<h3 class="text-xl font-semibold mb-2">{t('blog.noResults', lang)}</h3>
						<p class="text-gray-600 dark:text-gray-400">{t('blog.noResultsDesc', lang)}</p>
					</div>
				</div>
			</section>
		</main>
		<Footer />

		<style>
			.filter-btn {
				@apply px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors;
			}
			
			.filter-btn.active {
				@apply bg-primary-600 border-primary-600 text-white hover:bg-primary-700;
			}
			
			.line-clamp-2 {
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}
		</style>

		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const searchInput = document.getElementById('search-input') as HTMLInputElement;
				const postsContainer = document.getElementById('posts-container');
				const noResults = document.getElementById('no-results');
				const postsCount = document.getElementById('posts-count');
				const filterButtons = document.querySelectorAll('.filter-btn');
				
				let currentFilter = 'all';
				let currentSearchTerm = '';
				
				function filterPosts() {
					const posts = document.querySelectorAll('.post-item');
					let visibleCount = 0;
					
					posts.forEach((post) => {
						const element = post as HTMLElement;
						const categories = JSON.parse(element.dataset.categories || '[]');
						const tags = JSON.parse(element.dataset.tags || '[]');
						const title = element.dataset.title || '';
						const description = element.dataset.description || '';
						
						let matchesFilter = true;
						let matchesSearch = true;
						
						// Filter logic
						if (currentFilter !== 'all') {
							if (currentFilter.startsWith('category:')) {
								const filterCategory = currentFilter.replace('category:', '');
								matchesFilter = categories.includes(filterCategory);
							} else if (currentFilter.startsWith('tag:')) {
								const filterTag = currentFilter.replace('tag:', '');
								matchesFilter = tags.includes(filterTag);
							}
						}
						
						// Search logic
						if (currentSearchTerm) {
							matchesSearch = title.includes(currentSearchTerm) || description.includes(currentSearchTerm);
						}
						
						const shouldShow = matchesFilter && matchesSearch;
						element.style.display = shouldShow ? 'block' : 'none';
						
						if (shouldShow) visibleCount++;
					});
					
					// Update posts count
					if (postsCount) {
						postsCount.textContent = visibleCount.toString();
					}
					
					// Show/hide no results message
					if (noResults && postsContainer) {
						if (visibleCount === 0) {
							noResults.classList.remove('hidden');
							postsContainer.classList.add('hidden');
						} else {
							noResults.classList.add('hidden');
							postsContainer.classList.remove('hidden');
						}
					}
				}
				
				// Search functionality
				if (searchInput) {
					searchInput.addEventListener('input', (e) => {
						currentSearchTerm = (e.target as HTMLInputElement).value.toLowerCase();
						filterPosts();
					});
				}
				
				// Filter functionality
				filterButtons.forEach((button) => {
					button.addEventListener('click', () => {
						filterButtons.forEach(btn => btn.classList.remove('active'));
						button.classList.add('active');
						
						currentFilter = button.getAttribute('data-filter') || 'all';
						filterPosts();
					});
				});
			});
		</script>
	</body>
</html>