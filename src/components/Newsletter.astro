---
// Newsletter subscription component
import { getLangFromUrl } from '../utils/i18n';

interface Props {
  className?: string;
  variant?: 'inline' | 'modal' | 'sidebar';
}

const { className = '', variant = 'inline' } = Astro.props;
const lang = getLangFromUrl(Astro.url);
---

<div class={`newsletter-signup ${variant} ${className}`}>
  <div class="newsletter-content">
    {variant === 'inline' && (
      <div class="text-center mb-6">
        <div class="inline-flex items-center justify-center w-12 h-12 bg-primary-100 dark:bg-primary-900 rounded-full mb-4">
          <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
        </div>
        <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">
          {lang === 'ko' ? '뉴스레터 구독' : 'Subscribe to Newsletter'}
        </h3>
        <p class="text-gray-600 dark:text-gray-400">
          {lang === 'ko' 
            ? '새로운 기술 포스트와 인사이트를 이메일로 받아보세요. 월 1-2회 발송되며, 언제든 구독 취소할 수 있습니다.'
            : 'Get the latest tech posts and insights delivered to your inbox. Sent 1-2 times per month, unsubscribe anytime.'
          }
        </p>
      </div>
    )}
    
    <form class="newsletter-form" data-newsletter-form data-netlify="true" name="newsletter" method="POST">
      <input type="hidden" name="form-name" value="newsletter" />
      <input type="hidden" name="language" value={lang} />
      
      <div class="form-group">
        <div class="input-group">
          <input 
            type="email" 
            name="email" 
            id="newsletter-email"
            placeholder={lang === 'ko' ? '이메일 주소' : 'Your email address'}
            required
            class="newsletter-input"
            aria-label={lang === 'ko' ? '이메일 주소' : 'Email address'}
          />
          <button 
            type="submit" 
            class="newsletter-button"
            aria-label={lang === 'ko' ? '구독하기' : 'Subscribe'}
          >
            <span class="button-text">
              {lang === 'ko' ? '구독' : 'Subscribe'}
            </span>
            <span class="button-loading hidden">
              <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </span>
            <span class="button-success hidden">
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
            </span>
          </button>
        </div>
        
        <div class="form-message hidden" id="newsletter-message"></div>
      </div>
      
      <div class="form-footer">
        <p class="text-xs text-gray-500 dark:text-gray-400">
          {lang === 'ko' 
            ? '개인정보는 안전하게 보호되며, 뉴스레터 발송 목적으로만 사용됩니다.'
            : 'Your privacy is protected. Email only used for newsletter delivery.'
          }
        </p>
        
        <div class="flex items-center gap-4 mt-2">
          <div class="flex items-center gap-1 text-xs text-gray-400">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
            </svg>
            {lang === 'ko' ? '안전함' : 'Secure'}
          </div>
          <div class="flex items-center gap-1 text-xs text-gray-400">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
            {lang === 'ko' ? '스팸 없음' : 'No spam'}
          </div>
          <div class="flex items-center gap-1 text-xs text-gray-400">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
            </svg>
            {lang === 'ko' ? '언제든 해지' : 'Unsubscribe anytime'}
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<style>
  .newsletter-signup {
    @apply bg-gradient-to-br from-primary-50 to-blue-50 dark:from-gray-800 dark:to-gray-900 rounded-xl p-6 border border-primary-200 dark:border-gray-700;
  }
  
  .newsletter-signup.sidebar {
    @apply bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 p-4;
  }
  
  .newsletter-signup.modal {
    @apply bg-white dark:bg-gray-900 shadow-2xl max-w-md mx-auto;
  }
  
  .newsletter-input {
    @apply flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-l-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-primary-500 focus:border-transparent outline-none transition-all duration-200;
  }
  
  .newsletter-button {
    @apply px-6 py-3 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white font-medium rounded-r-lg transition-all duration-200 focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 outline-none disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .input-group {
    @apply flex rounded-lg shadow-sm;
  }
  
  .form-message {
    @apply mt-2 text-sm p-3 rounded-lg;
  }
  
  .form-message.success {
    @apply bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400 border border-green-200 dark:border-green-800;
  }
  
  .form-message.error {
    @apply bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 border border-red-200 dark:border-red-800;
  }
  
  .form-footer {
    @apply mt-4;
  }
</style>

<script is:inline define:vars={{ lang }}>
  document.addEventListener('DOMContentLoaded', function() {
    const forms = document.querySelectorAll('.newsletter-form');
    
    forms.forEach(form => {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const button = this.querySelector('.newsletter-button');
        const buttonText = button.querySelector('.button-text');
        const buttonLoading = button.querySelector('.button-loading');
        const buttonSuccess = button.querySelector('.button-success');
        const messageDiv = this.querySelector('#newsletter-message');
        const emailInput = this.querySelector('#newsletter-email');
        
        // Reset states
        messageDiv.classList.add('hidden');
        messageDiv.classList.remove('success', 'error');
        
        // Show loading state
        button.disabled = true;
        buttonText.classList.add('hidden');
        buttonLoading.classList.remove('hidden');
        
        try {
          // Submit form data to Netlify function
          const response = await fetch('/.netlify/functions/newsletter-subscribe', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: emailInput.value,
              language: lang
            })
          });
          
          const result = await response.json();
          const success = result.success;
          
          if (success) {
            // Success state
            buttonLoading.classList.add('hidden');
            buttonSuccess.classList.remove('hidden');
            
            messageDiv.textContent = result.message || (lang === 'ko' 
              ? '성공적으로 구독되었습니다! 확인 이메일을 확인해주세요.'
              : 'Successfully subscribed! Please check your email for confirmation.');
            messageDiv.classList.add('success');
            messageDiv.classList.remove('hidden');
            
            // Reset form
            emailInput.value = '';
            
            // Track subscription
            if (typeof window.gtag !== 'undefined') {
              window.gtag('event', 'newsletter_subscribe', {
                event_category: 'engagement',
                event_label: 'newsletter_form'
              });
            }
            
            // Reset button after delay
            setTimeout(() => {
              button.disabled = false;
              buttonSuccess.classList.add('hidden');
              buttonText.classList.remove('hidden');
            }, 3000);
            
          } else {
            throw new Error(result.message || 'Subscription failed');
          }
          
        } catch (error) {
          console.error('Newsletter subscription error:', error);
          
          // Error state
          buttonLoading.classList.add('hidden');
          buttonText.classList.remove('hidden');
          button.disabled = false;
          
          messageDiv.textContent = error.message || (lang === 'ko'
            ? '구독 중 오류가 발생했습니다. 다시 시도해주세요.'
            : 'An error occurred during subscription. Please try again.');
          messageDiv.classList.add('error');
          messageDiv.classList.remove('hidden');
        }
      });
    });
    
    // Email validation
    const emailInputs = document.querySelectorAll('#newsletter-email');
    emailInputs.forEach(input => {
      input.addEventListener('input', function() {
        const isValid = this.validity.valid;
        const button = this.closest('form').querySelector('.newsletter-button');
        
        if (this.value && !isValid) {
          this.classList.add('border-red-300', 'dark:border-red-600');
          this.classList.remove('border-gray-300', 'dark:border-gray-600');
        } else {
          this.classList.remove('border-red-300', 'dark:border-red-600');
          this.classList.add('border-gray-300', 'dark:border-gray-600');
        }
        
        button.disabled = !isValid || !this.value;
      });
    });
  });
</script>