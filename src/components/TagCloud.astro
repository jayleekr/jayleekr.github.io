---
// Tag cloud component for visualizing popular tags
import { getCollection } from 'astro:content';
import { getLangFromUrl, t } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const posts = await getCollection('blog');

// Count tag frequency
const tagCounts: Record<string, number> = {};
posts.forEach(post => {
  const tags = post.data.tags || [];
  tags.forEach(tag => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});

// Sort tags by frequency and get top tags
const sortedTags = Object.entries(tagCounts)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 30); // Show top 30 tags

// Calculate tag sizes based on frequency
const maxCount = Math.max(...Object.values(tagCounts));
const minCount = Math.min(...Object.values(tagCounts));

const getTagSize = (count: number): string => {
  const ratio = (count - minCount) / (maxCount - minCount);
  
  if (ratio > 0.8) return 'text-2xl';
  if (ratio > 0.6) return 'text-xl';  
  if (ratio > 0.4) return 'text-lg';
  if (ratio > 0.2) return 'text-base';
  return 'text-sm';
};

const getTagColor = (count: number): string => {
  const ratio = (count - minCount) / (maxCount - minCount);
  
  if (ratio > 0.8) return 'text-primary-700 dark:text-primary-300';
  if (ratio > 0.6) return 'text-primary-600 dark:text-primary-400';
  if (ratio > 0.4) return 'text-primary-500 dark:text-primary-500';
  if (ratio > 0.2) return 'text-gray-700 dark:text-gray-300';
  return 'text-gray-500 dark:text-gray-400';
};

interface Props {
  showTitle?: boolean;
  maxTags?: number;
  compact?: boolean;
}

const { 
  showTitle = true, 
  maxTags = 30,
  compact = false 
} = Astro.props;

const displayTags = sortedTags.slice(0, maxTags);
---

<div class={compact ? 'space-y-2' : 'space-y-4'}>
  {showTitle && (
    <div class="text-center">
      <h3 class={`font-bold text-gray-900 dark:text-gray-100 ${compact ? 'text-lg' : 'text-xl'}`}>
        {lang === 'ko' ? '인기 태그' : 'Popular Tags'}
      </h3>
    </div>
  )}

  <div class={`flex flex-wrap gap-2 ${compact ? 'justify-center' : 'justify-center'}`}>
    {displayTags.map(([tag, count]) => (
      <a
        href={`/blog?tag=${encodeURIComponent(tag)}`}
        class={`
          inline-block px-3 py-1 rounded-full border border-gray-200 dark:border-gray-700 
          hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 
          hover:scale-105 hover:shadow-sm
          ${getTagSize(count)} ${getTagColor(count)}
        `}
        title={`${count} ${lang === 'ko' ? '개의 글' : 'posts'}`}
      >
        #{tag}
      </a>
    ))}
  </div>

  {!compact && (
    <div class="text-center">
      <a 
        href="/blog"
        class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 hover:underline"
      >
        {lang === 'ko' ? '모든 글 보기' : 'View all posts'} →
      </a>
    </div>
  )}
</div>

<style>
  /* Custom hover effects for tags */
  a:hover {
    transform: translateY(-1px);
  }
</style>