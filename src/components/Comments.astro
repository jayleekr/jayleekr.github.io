---
// Comments component using Giscus (GitHub Discussions)
import { getLangFromUrl } from '../utils/i18n';

interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
const lang = getLangFromUrl(Astro.url);

// Giscus configuration
const REPO = 'jayleekr/jayleekr.github.io'; // GitHub repository
const REPO_ID = 'R_kgDOIYaKew'; // Repository ID (get from GitHub API)
const CATEGORY = 'General'; // Discussion category
const CATEGORY_ID = 'DIC_kwDOIYaKe84Ca5gR'; // Category ID (get from GitHub API)
---

<div class={`comments-section ${className}`}>
  <div class="mb-6">
    <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">
      {lang === 'ko' ? '댓글' : 'Comments'}
    </h3>
    <p class="text-sm text-gray-600 dark:text-gray-400">
      {lang === 'ko' 
        ? 'GitHub 계정으로 로그인하여 댓글을 남겨보세요. 건설적인 의견과 질문을 환영합니다!'
        : 'Sign in with your GitHub account to leave a comment. Constructive feedback and questions are welcome!'
      }
    </p>
  </div>
  
  <div class="giscus-container bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
    <div id="giscus-comments"></div>
    
    <!-- Loading placeholder -->
    <div id="comments-loading" class="text-center py-8">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
      <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
        {lang === 'ko' ? '댓글을 불러오는 중...' : 'Loading comments...'}
      </p>
    </div>
    
    <!-- Error fallback -->
    <div id="comments-error" class="hidden text-center py-8">
      <div class="text-gray-500 dark:text-gray-400">
        <svg class="w-12 h-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
        </svg>
        <p class="text-sm">
          {lang === 'ko' ? '댓글을 불러올 수 없습니다.' : 'Unable to load comments.'}
        </p>
        <button 
          onclick="loadGiscus()" 
          class="mt-2 text-primary-600 dark:text-primary-400 hover:underline text-sm"
        >
          {lang === 'ko' ? '다시 시도' : 'Try again'}
        </button>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ 
  lang, 
  REPO, 
  REPO_ID, 
  CATEGORY, 
  CATEGORY_ID 
}}>
  let giscusLoaded = false;

  function loadGiscus() {
    if (giscusLoaded) return;
    
    try {
      // Clear any existing content
      const commentsContainer = document.getElementById('giscus-comments');
      const loadingDiv = document.getElementById('comments-loading');
      const errorDiv = document.getElementById('comments-error');
      
      if (!commentsContainer) return;
      
      // Show loading state
      if (loadingDiv) loadingDiv.style.display = 'block';
      if (errorDiv) errorDiv.style.display = 'none';
      
      // Create Giscus script
      const script = document.createElement('script');
      script.src = 'https://giscus.app/client.js';
      script.setAttribute('data-repo', REPO);
      script.setAttribute('data-repo-id', REPO_ID);
      script.setAttribute('data-category', CATEGORY);
      script.setAttribute('data-category-id', CATEGORY_ID);
      script.setAttribute('data-mapping', 'pathname');
      script.setAttribute('data-strict', '0');
      script.setAttribute('data-reactions-enabled', '1');
      script.setAttribute('data-emit-metadata', '0');
      script.setAttribute('data-input-position', 'bottom');
      script.setAttribute('data-theme', document.documentElement.classList.contains('dark') ? 'dark' : 'light');
      script.setAttribute('data-lang', lang === 'ko' ? 'ko' : 'en');
      script.setAttribute('data-loading', 'lazy');
      script.crossOrigin = 'anonymous';
      script.async = true;
      
      // Handle successful load
      script.onload = function() {
        giscusLoaded = true;
        if (loadingDiv) loadingDiv.style.display = 'none';
        
        // Track comment section load
        if (typeof window.gtag !== 'undefined') {
          window.gtag('event', 'comments_loaded', {
            event_category: 'engagement',
            event_label: window.location.pathname
          });
        }
      };
      
      // Handle load error
      script.onerror = function() {
        console.error('Failed to load Giscus comments');
        if (loadingDiv) loadingDiv.style.display = 'none';
        if (errorDiv) errorDiv.style.display = 'block';
      };
      
      // Clear container and append script
      commentsContainer.innerHTML = '';
      commentsContainer.appendChild(script);
      
    } catch (error) {
      console.error('Error loading Giscus:', error);
      const loadingDiv = document.getElementById('comments-loading');
      const errorDiv = document.getElementById('comments-error');
      if (loadingDiv) loadingDiv.style.display = 'none';
      if (errorDiv) errorDiv.style.display = 'block';
    }
  }

  // Theme change handler
  function updateGiscusTheme() {
    if (!giscusLoaded) return;
    
    const iframe = document.querySelector('iframe.giscus-frame');
    if (iframe) {
      const newTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      iframe.contentWindow.postMessage({
        giscus: {
          setConfig: {
            theme: newTheme
          }
        }
      }, 'https://giscus.app');
    }
  }

  // Intersection Observer for lazy loading
  function initIntersectionObserver() {
    const commentsSection = document.querySelector('.comments-section');
    if (!commentsSection) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !giscusLoaded) {
          loadGiscus();
          observer.unobserve(entry.target);
        }
      });
    }, {
      rootMargin: '100px 0px',
      threshold: 0.1
    });

    observer.observe(commentsSection);
  }

  // Theme change listener
  function initThemeListener() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && 
            mutation.attributeName === 'class' && 
            mutation.target === document.documentElement) {
          updateGiscusTheme();
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    initIntersectionObserver();
    initThemeListener();
  });

  // Expose loadGiscus globally for retry button
  window.loadGiscus = loadGiscus;
</script>

<style>
  .giscus-container {
    transition: all 0.2s ease;
  }
  
  .giscus-container:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  /* Giscus iframe styling */
  .giscus-container :global(.giscus-frame) {
    border-radius: 8px;
  }
  
  /* Dark mode adjustments */
  :global(.dark) .giscus-container {
    background-color: rgb(31 41 55);
    border-color: rgb(75 85 99);
  }
  
  :global(.dark) .giscus-container:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
</style>