---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import { SITE_TITLE } from '../consts';
import FallbackImage from '../assets/blog-placeholder-1.jpg';
import GoogleAnalytics from './GoogleAnalytics.astro';
import ConversionTracking from './ConversionTracking.astro';
import WebVitals from './WebVitals.astro';
import type { ImageMetadata } from 'astro';

interface Props {
	title: string;
	description?: string;
	image?: ImageMetadata | string;
	article?: boolean;
	publishedTime?: Date;
	modifiedTime?: Date;
	tags?: string[];
	author?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { 
	title, 
	description = '소프트웨어 엔지니어이자 기술 블로거입니다. 개발과 기술에 대한 경험과 인사이트를 공유합니다.',
	image = FallbackImage,
	article = false,
	publishedTime,
	modifiedTime,
	tags = [],
	author = 'Jay Lee'
} = Astro.props;

// Get image URL, handle both string and ImageMetadata
const imageUrl = typeof image === 'string' ? image : image.src;

// Enhanced JSON-LD structured data for better SEO
const authorData = {
	'@type': 'Person',
	name: author,
	url: Astro.site?.toString(),
	gender: 'Male',
	jobTitle: 'Software Engineer',
	workFor: {
		'@type': 'Organization',
		name: 'Sonatus'
	},
	alumniOf: [
		{
			'@type': 'CollegeOrUniversity',
			name: 'University Name'
		}
	],
	knowsAbout: ['Software Engineering', 'Web Development', 'Basketball', 'Startup'],
	sameAs: [
		'https://github.com/jayleekr',
		'https://linkedin.com/in/jayleekr'
	]
};

const organizationData = {
	'@type': 'Organization',
	name: SITE_TITLE,
	url: Astro.site?.toString(),
	description: description,
	founder: authorData,
	logo: {
		'@type': 'ImageObject',
		url: new URL('/favicon.svg', Astro.site).toString(),
		width: 32,
		height: 32
	},
	sameAs: [
		'https://github.com/jayleekr',
		'https://linkedin.com/in/jayleekr'
	]
};

const jsonLD = article ? {
	'@context': 'https://schema.org',
	'@type': 'BlogPosting',
	mainEntityOfPage: {
		'@type': 'WebPage',
		'@id': canonicalURL.toString()
	},
	headline: title,
	name: title,
	description: description,
	image: {
		'@type': 'ImageObject',
		url: new URL(imageUrl, Astro.site).toString(),
		width: 1200,
		height: 630
	},
	author: authorData,
	publisher: organizationData,
	...(publishedTime && {
		datePublished: publishedTime.toISOString(),
		...(modifiedTime && { dateModified: modifiedTime.toISOString() })
	}),
	articleSection: tags.length > 0 ? tags[0] : 'Technology',
	keywords: tags.join(', '),
	language: 'ko-KR',
	inLanguage: 'ko-KR',
	wordCount: description ? description.split(' ').length * 10 : 500,
	timeRequired: 'PT5M',
	audience: {
		'@type': 'Audience',
		audienceType: 'Software Developers'
	},
	genre: 'Technology Blog',
	copyrightYear: new Date().getFullYear(),
	copyrightHolder: authorData
} : {
	'@context': 'https://schema.org',
	'@type': 'WebSite',
	name: title,
	description: description,
	url: canonicalURL.toString(),
	potentialAction: {
		'@type': 'SearchAction',
		target: {
			'@type': 'EntryPoint',
			urlTemplate: `${Astro.site}?search={search_term_string}`
		},
		'query-input': 'required name=search_term_string'
	},
	author: authorData,
	publisher: organizationData,
	inLanguage: ['ko-KR', 'en-US'],
	audience: {
		'@type': 'Audience',
		audienceType: 'Software Developers, Basketball Enthusiasts'
	}
};
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<meta name="theme-color" content="#3b82f6" />
<meta name="color-scheme" content="light dark" />

<!-- Mobile optimizations -->
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />
<meta name="apple-touch-fullscreen" content="yes" />
<meta name="format-detection" content="telephone=no,date=no,email=no,address=no" />

<!-- Icons and Manifest -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/manifest.json" />

<!-- PWA iOS Meta Tags -->
<meta name="apple-mobile-web-app-title" content="Jay's Blog" />
<link rel="apple-touch-icon" sizes="57x57" href="/icon-57x57.png" />
<link rel="apple-touch-icon" sizes="72x72" href="/icon-72x72.png" />
<link rel="apple-touch-icon" sizes="96x96" href="/icon-96x96.png" />
<link rel="apple-touch-icon" sizes="128x128" href="/icon-128x128.png" />
<link rel="apple-touch-icon" sizes="144x144" href="/icon-144x144.png" />
<link rel="apple-touch-icon" sizes="152x152" href="/icon-152x152.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/icon-180x180.png" />
<link rel="apple-touch-icon" sizes="192x192" href="/icon-192x192.png" />

<!-- RSS and Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={`${SITE_TITLE} - All Posts`}
	href={new URL('rss.xml', Astro.site)}
/>
<link
	rel="alternate"
	type="application/rss+xml"
	title={`${SITE_TITLE} - English Posts`}
	href={new URL('rss/en.xml', Astro.site)}
/>

<!-- Preload Critical Resources -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Performance Optimization: Font Loading -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="dns-prefetch" href="//github.com" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content={author} />
<meta name="robots" content="index, follow" />
<meta name="language" content="ko-KR" />
<meta name="generator" content={Astro.generator} />

<!-- Google Search Console Verification -->
<meta name="google-site-verification" content="" />
<!-- To be filled with actual verification code when setting up GSC -->

<!-- Bing Webmaster Tools Verification -->
<meta name="msvalidate.01" content="" />

<!-- Yandex Verification -->
<meta name="yandex-verification" content="" />

<!-- Enhanced Keywords for articles -->
{tags.length > 0 && <meta name="keywords" content={tags.concat(['Jay Lee', 'Software Engineer', 'Basketball', 'Technology', 'Blog']).join(', ')} />}
{!tags.length && <meta name="keywords" content="Jay Lee, Software Engineer, Basketball, Technology, Development, Programming, Blog, Tutorial" />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={article ? 'article' : 'website'} />
<meta property="og:site_name" content={SITE_TITLE} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(imageUrl, Astro.site)} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={title} />
<meta property="og:image:type" content="image/jpeg" />
<meta property="og:locale" content="ko_KR" />
<meta property="og:locale:alternate" content="en_US" />

<!-- Article specific Open Graph -->
{article && publishedTime && (
	<>
		<meta property="article:author" content={author} />
		<meta property="article:published_time" content={publishedTime.toISOString()} />
		{modifiedTime && <meta property="article:modified_time" content={modifiedTime.toISOString()} />}
		<meta property="article:section" content="Technology" />
		{tags.map(tag => <meta property="article:tag" content={tag} />)}
	</>
)}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@jayleekr" />
<meta name="twitter:creator" content="@jayleekr" />
<meta name="twitter:url" content={canonicalURL} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={new URL(imageUrl, Astro.site)} />
<meta name="twitter:image:alt" content={title} />

<!-- Enhanced SEO Meta Tags -->
<meta name="format-detection" content="telephone=no,date=no,email=no,address=no" />
<meta name="revisit-after" content="7 days" />
<meta name="distribution" content="global" />
<meta name="rating" content="general" />
<meta name="referrer" content="origin-when-cross-origin" />

<!-- Performance hints -->
<meta name="renderer" content="webkit" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />

<!-- Security headers -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-Frame-Options" content="DENY" />

<!-- Geo meta tags -->
<meta name="geo.region" content="KR" />
<meta name="geo.placename" content="Seoul, South Korea" />

<!-- Content classification -->
<meta name="classification" content="Technology Blog" />
<meta name="category" content="Software Engineering, Basketball, Technology" />

<!-- Theme Initialization Script (prevents FOUC) -->
<script is:inline>
	// Check for saved theme preference or default to system preference
	(function() {
		function getStoredTheme() {
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme');
			}
			return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
		}
		
		const theme = getStoredTheme();
		
		if (theme === 'dark') {
			document.documentElement.classList.add('dark');
		} else {
			document.documentElement.classList.remove('dark');
		}
		
		// Add no-transition class temporarily to prevent animation on page load
		document.documentElement.classList.add('no-transition');
		
		// Remove no-transition class after page load
		window.addEventListener('load', () => {
			document.documentElement.classList.remove('no-transition');
		});
	})();
</script>

<!-- Enhanced JSON-LD Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(jsonLD, null, 0)} />

<!-- Additional Schema.org markup for breadcrumbs -->
{article && (
	<script type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": "BreadcrumbList",
			"itemListElement": [
				{
					"@type": "ListItem",
					"position": 1,
					"name": "Home",
					"item": "{Astro.site}"
				},
				{
					"@type": "ListItem",
					"position": 2,
					"name": "Blog",
					"item": "{new URL('/blog', Astro.site)}"
				},
				{
					"@type": "ListItem",
					"position": 3,
					"name": "{title}"
				}
			]
		}
	</script>
)}

<!-- Google Analytics -->
<GoogleAnalytics />

<!-- Advanced Conversion Tracking -->
<ConversionTracking />

<!-- Web Vitals Performance Monitoring -->
<WebVitals />

<!-- PWA Service Worker Registration -->
<script is:inline>
	// Register service worker for PWA functionality
	if ('serviceWorker' in navigator) {
		window.addEventListener('load', async () => {
			try {
				const registration = await navigator.serviceWorker.register('/sw.js');
				console.log('[PWA] Service Worker registered successfully:', registration.scope);
				
				// Handle service worker updates
				registration.addEventListener('updatefound', () => {
					const newWorker = registration.installing;
					if (newWorker) {
						newWorker.addEventListener('statechange', () => {
							if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
								// New version available, show update notification
								if (confirm('새로운 버전이 사용 가능합니다. 지금 업데이트하시겠습니까?')) {
									newWorker.postMessage({ action: 'skipWaiting' });
									window.location.reload();
								}
							}
						});
					}
				});
				
				// Listen for service worker messages
				navigator.serviceWorker.addEventListener('message', (event) => {
					if (event.data.action === 'reload') {
						window.location.reload();
					}
				});
				
			} catch (error) {
				console.error('[PWA] Service Worker registration failed:', error);
			}
		});
	}
	
	// Install prompt handling
	let deferredPrompt;
	window.addEventListener('beforeinstallprompt', (e) => {
		// Prevent Chrome 67 and earlier from automatically showing the prompt
		e.preventDefault();
		// Stash the event so it can be triggered later
		deferredPrompt = e;
		
		// Show install button if not already installed
		if (!window.matchMedia('(display-mode: standalone)').matches) {
			showInstallButton();
		}
	});
	
	function showInstallButton() {
		// Create install button dynamically
		const installButton = document.createElement('button');
		installButton.textContent = '앱 설치';
		installButton.className = 'fixed bottom-20 right-4 z-50 bg-primary-600 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-primary-700 transition-colors';
		installButton.style.display = 'none';
		
		// Show button after 5 seconds on mobile
		if (window.innerWidth < 768) {
			setTimeout(() => {
				installButton.style.display = 'block';
			}, 5000);
		}
		
		installButton.addEventListener('click', async () => {
			if (deferredPrompt) {
				// Show the install prompt
				deferredPrompt.prompt();
				// Wait for the user to respond to the prompt
				const { outcome } = await deferredPrompt.userChoice;
				console.log(`[PWA] User response to the install prompt: ${outcome}`);
				// Clear the deferredPrompt variable
				deferredPrompt = null;
				// Hide the install button
				installButton.style.display = 'none';
			}
		});
		
		document.body.appendChild(installButton);
	}
	
	// Handle app installed event
	window.addEventListener('appinstalled', () => {
		console.log('[PWA] App was installed successfully');
		// Hide install button if visible
		const installButton = document.querySelector('button[style*="bg-primary-600"]');
		if (installButton) {
			installButton.style.display = 'none';
		}
	});
</script>

<!-- Code Enhancement Script -->
<script src="/scripts/code-enhancements.js" defer></script>

<!-- Mobile Enhancement Script -->
<script src="/scripts/mobile-enhancements.js" defer></script>
