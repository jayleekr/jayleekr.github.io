---
// Global search component for site-wide search functionality
import { getCollection } from 'astro:content';
import { getLangFromUrl, t } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);

// Get all blog posts for search indexing
const posts = await getCollection('blog');

// Create search index
const searchIndex = posts.map(post => ({
  id: post.id,
  title: post.data.title,
  description: post.data.description || '',
  content: post.body || '', // This will include the raw markdown content
  categories: post.data.categories || [],
  tags: post.data.tags || [],
  pubDate: post.data.pubDate.toISOString(),
  url: `/blog/${post.id}/`
}));

// Add static pages to search index
const staticPages = [
  {
    id: 'about',
    title: 'About',
    description: '소프트웨어 엔지니어이자 농구선수 Jay Lee에 대한 소개',
    content: 'Software Engineer Sonatus Hyundai Autron Basketball Player',
    categories: ['personal'],
    tags: ['about', 'profile'],
    pubDate: new Date().toISOString(),
    url: '/about/'
  },
  {
    id: 'home',
    title: 'Home',
    description: 'Jay Lee의 개인 블로그 - 기술과 농구를 사랑하는 소프트웨어 엔지니어',
    content: 'Software Engineer Jay Lee Blog Technology Basketball Development',
    categories: ['home'],
    tags: ['home', 'blog'],
    pubDate: new Date().toISOString(),
    url: '/'
  }
];

const fullSearchIndex = [...searchIndex, ...staticPages];
---

<!-- Search Modal -->
<div 
  id="search-modal" 
  class="fixed inset-0 z-50 hidden bg-black bg-opacity-50 backdrop-blur-sm"
  role="dialog"
  aria-modal="true"
  aria-labelledby="search-title"
>
  <div class="flex min-h-full items-start justify-center p-4 pt-16">
    <div class="w-full max-w-2xl rounded-lg bg-white dark:bg-gray-800 shadow-xl">
      <!-- Search Header -->
      <div class="border-b border-gray-200 dark:border-gray-700 p-4">
        <div class="flex items-center justify-between">
          <h2 id="search-title" class="text-lg font-semibold text-gray-900 dark:text-gray-100">
            {t("search.title", lang)}
          </h2>
          <button 
            id="close-search"
            class="rounded-lg p-2 text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-500 dark:hover:text-gray-300"
            aria-label={t("search.close", lang)}
          >
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <!-- Search Input -->
        <div class="relative mt-4">
          <input
            id="global-search-input"
            type="text"
            placeholder={t("search.placeholder", lang)}
            class="w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 px-4 py-3 pl-10 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500"
            autocomplete="off"
            autocapitalize="off"
            autocorrect="off"
            spellcheck="false"
          />
          <svg class="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        
        <!-- Search Stats -->
        <div class="mt-2 text-sm text-gray-500 dark:text-gray-400">
          <span id="search-stats">{t("search.prompt", lang)}</span>
        </div>
      </div>
      
      <!-- Search Results -->
      <div class="max-h-96 overflow-y-auto">
        <div id="search-results" class="p-4">
          <!-- Results will be populated here -->
        </div>
        
        <!-- No Results Message -->
        <div id="no-search-results" class="hidden p-8 text-center">
          <svg class="mx-auto h-12 w-12 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">{t("search.noResults", lang)}</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">{t("search.noResultsDesc", lang)}</p>
        </div>
        
        <!-- Recent Searches -->
        <div id="recent-searches" class="border-t border-gray-200 dark:border-gray-700 p-4">
          <h3 class="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2">{t("search.recent", lang)}</h3>
          <div id="recent-searches-list" class="space-y-1">
            <!-- Recent searches will be populated here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<script define:vars={{ searchIndex: fullSearchIndex }}>
  document.addEventListener('DOMContentLoaded', () => {
    const openSearchBtn = document.getElementById('open-search');
    const searchModal = document.getElementById('search-modal');
    const closeSearchBtn = document.getElementById('close-search');
    const searchInput = document.getElementById('global-search-input');
    const searchResults = document.getElementById('search-results');
    const searchStats = document.getElementById('search-stats');
    const noResults = document.getElementById('no-search-results');
    const recentSearches = document.getElementById('recent-searches');
    const recentSearchesList = document.getElementById('recent-searches-list');
    
    if (!openSearchBtn || !searchModal || !closeSearchBtn || !searchInput || !searchResults) {
      return;
    }

    let searchTimeout;
    const recentSearchesKey = 'global-search-recent';
    
    // Get recent searches from localStorage
    function getRecentSearches() {
      try {
        return JSON.parse(localStorage.getItem(recentSearchesKey) || '[]');
      } catch {
        return [];
      }
    }
    
    // Save recent search
    function saveRecentSearch(query) {
      if (!query.trim()) return;
      
      const recent = getRecentSearches();
      const filtered = recent.filter(item => item !== query);
      const updated = [query, ...filtered].slice(0, 5); // Keep only 5 recent searches
      
      localStorage.setItem(recentSearchesKey, JSON.stringify(updated));
      displayRecentSearches();
    }
    
    // Display recent searches
    function displayRecentSearches() {
      const recent = getRecentSearches();
      
      if (recent.length === 0) {
        recentSearches.classList.add('hidden');
        return;
      }
      
      recentSearches.classList.remove('hidden');
      recentSearchesList.innerHTML = recent.map(query => `
        <button 
          class="flex w-full items-center gap-2 rounded px-2 py-1 text-left text-sm text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
          onclick="performSearch('${query.replace(/'/g, "\\'")}')"
        >
          <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          ${query}
        </button>
      `).join('');
    }
    
    // Highlight search terms in text
    function highlightText(text, query) {
      if (!query.trim()) return text;
      
      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-900 rounded px-1">$1</mark>');
    }
    
    // Search function
    function performSearch(query) {
      if (typeof query === 'string') {
        searchInput.value = query;
      } else {
        query = searchInput.value;
      }
      
      if (!query.trim()) {
        searchResults.innerHTML = '';
        searchStats.textContent = '결과를 보려면 검색어를 입력하세요';
        noResults.classList.add('hidden');
        displayRecentSearches();
        return;
      }
      
      // Filter and rank results
      const results = searchIndex.filter(item => {
        const searchText = `${item.title} ${item.description} ${item.content} ${item.categories.join(' ')} ${item.tags.join(' ')}`.toLowerCase();
        return searchText.includes(query.toLowerCase());
      }).sort((a, b) => {
        // Prioritize title matches
        const aTitle = a.title.toLowerCase().includes(query.toLowerCase());
        const bTitle = b.title.toLowerCase().includes(query.toLowerCase());
        
        if (aTitle && !bTitle) return -1;
        if (!aTitle && bTitle) return 1;
        
        // Then by recency (for blog posts)
        return new Date(b.pubDate) - new Date(a.pubDate);
      });
      
      // Update stats
      searchStats.textContent = `${results.length}개의 결과`;
      
      if (results.length === 0) {
        searchResults.innerHTML = '';
        noResults.classList.remove('hidden');
        recentSearches.classList.add('hidden');
        return;
      }
      
      noResults.classList.add('hidden');
      recentSearches.classList.add('hidden');
      
      // Display results
      searchResults.innerHTML = results.map(result => `
        <a 
          href="${result.url}" 
          class="block rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          onclick="saveRecentSearch('${query.replace(/'/g, "\\'")}')"
        >
          <h3 class="font-medium text-gray-900 dark:text-gray-100">
            ${highlightText(result.title, query)}
          </h3>
          ${result.description ? `
            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
              ${highlightText(result.description, query)}
            </p>
          ` : ''}
          <div class="mt-2 flex flex-wrap gap-2">
            ${result.categories.slice(0, 2).map(cat => `
              <span class="inline-flex items-center rounded-full bg-primary-100 dark:bg-primary-900 px-2 py-1 text-xs font-medium text-primary-800 dark:text-primary-200">
                ${cat}
              </span>
            `).join('')}
            ${result.tags.slice(0, 3).map(tag => `
              <span class="inline-flex items-center rounded-full bg-gray-100 dark:bg-gray-700 px-2 py-1 text-xs font-medium text-gray-700 dark:text-gray-300">
                #${tag}
              </span>
            `).join('')}
          </div>
        </a>
      `).join('');
      
      saveRecentSearch(query);
    }
    
    // Event listeners
    openSearchBtn.addEventListener('click', () => {
      searchModal.classList.remove('hidden');
      searchInput.focus();
      displayRecentSearches();
    });
    
    closeSearchBtn.addEventListener('click', () => {
      searchModal.classList.add('hidden');
      searchInput.value = '';
      searchResults.innerHTML = '';
    });
    
    // Close modal on background click
    searchModal.addEventListener('click', (e) => {
      if (e.target === searchModal) {
        searchModal.classList.add('hidden');
        searchInput.value = '';
        searchResults.innerHTML = '';
      }
    });
    
    // Search input with debounce
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch();
      }, 300);
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Cmd+K or Ctrl+K to open search
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        openSearchBtn.click();
      }
      
      // Escape to close search
      if (e.key === 'Escape' && !searchModal.classList.contains('hidden')) {
        closeSearchBtn.click();
      }
    });
    
    // Make performSearch globally available
    window.performSearch = performSearch;
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  mark {
    background-color: rgb(254 240 138 / 0.8);
  }
  
  .dark mark {
    background-color: rgb(133 77 14 / 0.8);
    color: rgb(254 240 138);
  }
</style>