---
// Related posts component for auto-recommendations
import { getCollection } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import ReadingTime from './ReadingTime.astro';
import { getLangFromUrl, t } from '../utils/i18n';

interface Props {
  currentPostId: string;
  currentCategories?: string[];
  currentTags?: string[];
  maxPosts?: number;
}

const { 
  currentPostId, 
  currentCategories = [], 
  currentTags = [], 
  maxPosts = 3 
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const allPosts = await getCollection('blog');

// Filter out current post
const otherPosts = allPosts.filter(post => post.id !== currentPostId);

// Calculate similarity scores
const scoredPosts = otherPosts.map(post => {
  const postCategories = post.data.categories || [];
  const postTags = post.data.tags || [];
  
  let score = 0;
  
  // Category matching (higher weight)
  const categoryMatches = postCategories.filter(cat => currentCategories.includes(cat)).length;
  score += categoryMatches * 3;
  
  // Tag matching (lower weight)
  const tagMatches = postTags.filter(tag => currentTags.includes(tag)).length;
  score += tagMatches * 1;
  
  // Recency bonus (slight preference for newer posts)
  const daysDiff = Math.abs(new Date().getTime() - post.data.pubDate.getTime()) / (1000 * 60 * 60 * 24);
  const recencyBonus = Math.max(0, (365 - daysDiff) / 365); // Bonus decreases over a year
  score += recencyBonus * 0.5;
  
  return {
    post,
    score,
    categoryMatches,
    tagMatches
  };
});

// Sort by score and take top posts
const relatedPosts = scoredPosts
  .filter(item => item.score > 0) // Only include posts with some relevance
  .sort((a, b) => b.score - a.score)
  .slice(0, maxPosts);

// If we don't have enough related posts, fill with recent posts from same main category
if (relatedPosts.length < maxPosts && currentCategories.length > 0) {
  const mainCategory = currentCategories[0];
  const sameCategoryPosts = otherPosts
    .filter(post => {
      const postCategories = post.data.categories || [];
      return postCategories[0] === mainCategory && 
             !relatedPosts.some(related => related.post.id === post.id);
    })
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .slice(0, maxPosts - relatedPosts.length);
    
  sameCategoryPosts.forEach(post => {
    relatedPosts.push({
      post,
      score: 0.5, // Lower score for category-only matches
      categoryMatches: 1,
      tagMatches: 0
    });
  });
}

// If still not enough, add most recent posts
if (relatedPosts.length < maxPosts) {
  const recentPosts = otherPosts
    .filter(post => !relatedPosts.some(related => related.post.id === post.id))
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .slice(0, maxPosts - relatedPosts.length);
    
  recentPosts.forEach(post => {
    relatedPosts.push({
      post,
      score: 0.1,
      categoryMatches: 0,
      tagMatches: 0
    });
  });
}
---

{relatedPosts.length > 0 && (
  <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
    <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-6">
      {lang === 'ko' ? '관련 글' : 'Related Posts'}
    </h3>
    
    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {relatedPosts.map(({ post, categoryMatches, tagMatches }) => (
        <article class="group">
          <a 
            href={`/blog/${post.id}/`}
            class="block bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-lg transition-shadow duration-200"
          >
            {post.data.heroImage && (
              <div class="aspect-video overflow-hidden">
                {typeof post.data.heroImage === 'string' ? (
                  <img 
                    src={post.data.heroImage} 
                    alt={post.data.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
                  />
                ) : (
                  <img 
                    src={post.data.heroImage.src} 
                    alt={post.data.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
                  />
                )}
              </div>
            )}
            
            <div class="p-4">
              <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 mb-2">
                <FormattedDate date={post.data.pubDate} />
                {post.body && (
                  <>
                    <span>•</span>
                    <ReadingTime content={post.body} showIcon={false} />
                  </>
                )}
                {(categoryMatches > 0 || tagMatches > 0) && (
                  <>
                    <span>•</span>
                    <span class="flex items-center gap-1">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.102m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                      </svg>
                      {categoryMatches + tagMatches} {lang === 'ko' ? '개 연관' : 'matches'}
                    </span>
                  </>
                )}
              </div>
              
              <h4 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors line-clamp-2">
                {post.data.title}
              </h4>
              
              {post.data.description && (
                <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-3">
                  {post.data.description}
                </p>
              )}
              
              <div class="flex flex-wrap gap-1">
                {post.data.categories && post.data.categories.slice(0, 2).map((category) => (
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200">
                    {category}
                  </span>
                ))}
                {post.data.tags && post.data.tags.slice(0, 2).map((tag) => (
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                    #{tag}
                  </span>
                ))}
              </div>
            </div>
          </a>
        </article>
      ))}
    </div>
    
    {relatedPosts.length === maxPosts && (
      <div class="text-center mt-6">
        <a 
          href="/blog"
          class="inline-flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium transition-colors"
        >
          {lang === 'ko' ? '더 많은 글 보기' : 'View more posts'}
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    )}
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>