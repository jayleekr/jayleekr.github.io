---
// Category hierarchy component for organizing blog content
import { getCollection } from 'astro:content';
import { getLangFromUrl, t } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const posts = await getCollection('blog');

// Define category hierarchy based on folder structure and content analysis
const categoryHierarchy: Record<string, {
  name: string;
  description: string;
  color: 'blue' | 'purple' | 'green';
  count?: number;
  subcategories: Record<string, { name: string; count: number }>;
}> = {
  'TechSavvy': {
    name: lang === 'ko' ? '기술 (Tech)' : 'Tech',
    description: lang === 'ko' ? '심화 튜토리얼, 기술 트렌드 분석, 아키텍처 설계 경험' : 'Advanced tutorials, tech trends, architecture design',
    color: 'blue',
    subcategories: {
      'Container': { name: 'Container', count: 0 },
      'AI': { name: 'AI', count: 0 },
      'Bash': { name: 'Bash', count: 0 },
      'C++': { name: 'C++', count: 0 },
      'ComputerArchitecture': { name: 'Computer Architecture', count: 0 },
      'EmbeddedLinux': { name: 'Embedded Linux', count: 0 },
      'Github': { name: 'GitHub', count: 0 },
      'LinuxKernel': { name: 'Linux Kernel', count: 0 },
      'OperatingSystems': { name: 'Operating Systems', count: 0 },
      'Yocto': { name: 'Yocto', count: 0 }
    }
  },
  'DeepThinking': {
    name: lang === 'ko' ? '깊은 생각 (Deep Thinking)' : 'Deep Thinking',
    description: lang === 'ko' ? '커리어 전환, 면접 경험, 업계 동향, 멘토링 인사이트' : 'Career transitions, interviews, industry trends, mentoring',
    color: 'purple',
    subcategories: {
      'AI': { name: 'AI', count: 0 },
      'Daily': { name: 'Daily', count: 0 },
      'Retrospect': { name: 'Retrospect', count: 0 }
    }
  },
  'Collaboration': {
    name: lang === 'ko' ? '협업 (Collaboration)' : 'Collaboration',
    description: lang === 'ko' ? '프로젝트 케이스 스터디, 문제 해결, 기술적 의사결정' : 'Project case studies, problem solving, technical decisions',
    color: 'green',
    subcategories: {
      'ToyProjects': { name: 'Toy Projects', count: 0 }
    }
  }
};

// Count posts in each category
posts.forEach(post => {
  const categories = post.data.categories || [];
  if (categories.length > 0) {
    const mainCategory = categories[0];
    if (categoryHierarchy[mainCategory]) {
      // Main category
      if (!categoryHierarchy[mainCategory].count) {
        categoryHierarchy[mainCategory].count = 0;
      }
      categoryHierarchy[mainCategory].count++;
      
      // Subcategory
      if (categories.length > 1) {
        const subCategory = categories[1];
        if (categoryHierarchy[mainCategory].subcategories[subCategory]) {
          categoryHierarchy[mainCategory].subcategories[subCategory].count++;
        }
      }
    }
  }
});

const getColorClasses = (color: 'blue' | 'purple' | 'green') => {
  const colorMap = {
    blue: 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 border-blue-200 dark:border-blue-700',
    purple: 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 border-purple-200 dark:border-purple-700',
    green: 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 border-green-200 dark:border-green-700'
  };
  return colorMap[color] || colorMap.blue;
};
---

<div class="space-y-6">
  <div class="text-center mb-8">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
      {lang === 'ko' ? '카테고리별 콘텐츠' : 'Content by Category'}
    </h2>
    <p class="text-gray-600 dark:text-gray-400">
      {lang === 'ko' ? '관심 있는 주제를 선택해 관련 글을 찾아보세요' : 'Explore topics that interest you'}
    </p>
  </div>

  <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
    {Object.entries(categoryHierarchy).map(([key, category]) => (
      <div class={`rounded-lg border-2 p-6 transition-all hover:shadow-lg ${getColorClasses(category.color)}`}>
        <div class="mb-4">
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-lg font-semibold">{category.name}</h3>
            <span class="text-sm font-medium px-2 py-1 rounded-full bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300">
              {category.count || 0} {lang === 'ko' ? '개' : 'posts'}
            </span>
          </div>
          <p class="text-sm opacity-80 mb-4">{category.description}</p>
        </div>

        <div class="space-y-2">
          <h4 class="text-sm font-medium opacity-75 mb-2">
            {lang === 'ko' ? '하위 카테고리' : 'Subcategories'}
          </h4>
          <div class="grid grid-cols-2 gap-2">
            {Object.entries(category.subcategories).map(([subKey, subcategory]) => (
              <a 
                href={`/blog?category=${key}&subcategory=${subKey}`}
                class="block px-3 py-2 text-xs font-medium rounded bg-white dark:bg-gray-800 bg-opacity-50 hover:bg-opacity-75 transition-all hover:scale-105"
              >
                <div class="flex items-center justify-between">
                  <span>{subcategory.name}</span>
                  <span class="text-xs opacity-60">{subcategory.count || 0}</span>
                </div>
              </a>
            ))}
          </div>
        </div>

        <div class="mt-4 pt-4 border-t border-current border-opacity-20">
          <a 
            href={`/blog?category=${key}`}
            class="inline-flex items-center text-sm font-medium hover:underline"
          >
            {lang === 'ko' ? '모든 글 보기' : 'View all posts'}
            <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </a>
        </div>
      </div>
    ))}
  </div>
</div>