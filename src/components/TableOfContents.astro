---
// Table of Contents component that automatically generates TOC from content headings
import { getLangFromUrl } from '../utils/i18n';

interface Props {
  content?: string;
  className?: string;
  maxDepth?: number;
  showNumbers?: boolean;
}

const { 
  content = '', 
  className = '', 
  maxDepth = 3, 
  showNumbers = false 
} = Astro.props;

const lang = getLangFromUrl(Astro.url);

// Extract headings from content using regex
const headingRegex = /^(#{1,6})\s+(.+)$/gm;
const headings: Array<{
  level: number;
  text: string;
  id: string;
  children?: Array<any>;
}> = [];

let match;
while ((match = headingRegex.exec(content)) !== null) {
  const level = match[1].length;
  const text = match[2].trim();
  
  // Skip if deeper than maxDepth
  if (level > maxDepth) continue;
  
  // Generate ID from heading text
  const id = text
    .toLowerCase()
    .replace(/[^\w\s가-힣]/g, '') // Keep alphanumeric, spaces, and Korean characters
    .replace(/\s+/g, '-')
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
  
  headings.push({
    level,
    text,
    id: id || `heading-${headings.length + 1}`
  });
}

// Build hierarchical structure
function buildHierarchy(headings: Array<any>) {
  const result: Array<any> = [];
  const stack: Array<any> = [];

  for (const heading of headings) {
    // Find the right parent level
    while (stack.length > 0 && stack[stack.length - 1].level >= heading.level) {
      stack.pop();
    }
    
    // Add children array if not exists
    heading.children = [];
    
    if (stack.length === 0) {
      result.push(heading);
    } else {
      if (!stack[stack.length - 1].children) {
        stack[stack.length - 1].children = [];
      }
      stack[stack.length - 1].children.push(heading);
    }
    
    stack.push(heading);
  }
  
  return result;
}

const hierarchicalHeadings = buildHierarchy(headings);

// Don't render if no headings found
if (headings.length === 0) {
  // Return empty component
}
---

{headings.length > 0 && (
  <div class={`table-of-contents ${className}`}>
    <div class="toc-header">
      <div class="flex items-center gap-2 mb-4">
        <svg class="w-5 h-5 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
        </svg>
        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">
          {lang === 'ko' ? '목차' : 'Table of Contents'}
        </h3>
      </div>
      
      <div class="toc-controls">
        <button 
          id="toc-toggle" 
          class="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
          aria-label={lang === 'ko' ? '목차 접기/펼치기' : 'Toggle table of contents'}
        >
          <span class="toc-collapse-text">{lang === 'ko' ? '접기' : 'Collapse'}</span>
          <span class="toc-expand-text hidden">{lang === 'ko' ? '펼치기' : 'Expand'}</span>
        </button>
      </div>
    </div>
    
    <nav class="toc-nav" aria-label={lang === 'ko' ? '문서 목차' : 'Table of contents'}>
      <ol class="toc-list">
        {hierarchicalHeadings.map((heading, index) => (
          <li class={`toc-item level-${heading.level}`} data-level={heading.level}>
            <a 
              href={`#${heading.id}`}
              class="toc-link"
              data-heading-id={heading.id}
            >
              {showNumbers && <span class="toc-number">{index + 1}.</span>}
              <span class="toc-text">{heading.text}</span>
            </a>
            
            {heading.children && heading.children.length > 0 && (
              <ol class="toc-sublist">
                {heading.children.map((child: any, childIndex: number) => (
                  <li class={`toc-item level-${child.level}`} data-level={child.level}>
                    <a 
                      href={`#${child.id}`}
                      class="toc-link"
                      data-heading-id={child.id}
                    >
                      {showNumbers && <span class="toc-number">{index + 1}.{childIndex + 1}</span>}
                      <span class="toc-text">{child.text}</span>
                    </a>
                    
                    {child.children && child.children.length > 0 && (
                      <ol class="toc-sublist">
                        {child.children.map((grandchild: any, grandchildIndex: number) => (
                          <li class={`toc-item level-${grandchild.level}`} data-level={grandchild.level}>
                            <a 
                              href={`#${grandchild.id}`}
                              class="toc-link"
                              data-heading-id={grandchild.id}
                            >
                              {showNumbers && <span class="toc-number">{index + 1}.{childIndex + 1}.{grandchildIndex + 1}</span>}
                              <span class="toc-text">{grandchild.text}</span>
                            </a>
                          </li>
                        ))}
                      </ol>
                    )}
                  </li>
                ))}
              </ol>
            )}
          </li>
        ))}
      </ol>
      
      <div class="toc-progress-container mt-4">
        <div class="text-xs text-gray-500 dark:text-gray-400 mb-2">
          {lang === 'ko' ? '읽기 진행률' : 'Reading Progress'}
        </div>
        <div class="toc-progress-bar">
          <div class="toc-progress-fill" id="reading-progress"></div>
        </div>
        <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
          <span id="progress-percentage">0%</span>
        </div>
      </div>
    </nav>
  </div>
)}

<style>
  .table-of-contents {
    @apply bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 sticky top-8;
    max-height: calc(100vh - 6rem);
    overflow-y: auto;
    /* Better positioning for the 3-column layout */
    min-width: 250px;
    max-width: 280px;
  }
  
  .toc-header {
    @apply pb-2 border-b border-gray-200 dark:border-gray-700 mb-4;
  }
  
  .toc-nav {
    transition: all 0.3s ease;
  }
  
  .toc-nav.collapsed {
    @apply hidden;
  }
  
  .toc-list,
  .toc-sublist {
    @apply list-none space-y-1;
    margin: 0;
    padding: 0;
  }
  
  .toc-sublist {
    @apply ml-4 mt-1;
  }
  
  .toc-item {
    @apply text-sm;
  }
  
  .toc-link {
    @apply flex items-start gap-2 py-1 px-2 rounded text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200 no-underline;
    line-height: 1.4;
  }
  
  .toc-link.active {
    @apply text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/30 font-medium;
  }
  
  .toc-number {
    @apply text-xs text-gray-400 dark:text-gray-500 font-mono flex-shrink-0 mt-0.5;
    min-width: 1.5rem;
  }
  
  .toc-text {
    @apply flex-1 break-words;
  }
  
  /* Level-specific styling */
  .level-1 .toc-link {
    @apply font-medium text-gray-800 dark:text-gray-200;
  }
  
  .level-2 .toc-link {
    @apply text-gray-600 dark:text-gray-400;
  }
  
  .level-3 .toc-link {
    @apply text-gray-500 dark:text-gray-500 text-xs;
  }
  
  /* Progress bar */
  .toc-progress-bar {
    @apply w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden;
  }
  
  .toc-progress-fill {
    @apply h-full bg-primary-600 dark:bg-primary-500 transition-all duration-300 ease-out;
    width: 0%;
  }
  
  /* Scrollbar styling */
  .table-of-contents::-webkit-scrollbar {
    width: 4px;
  }
  
  .table-of-contents::-webkit-scrollbar-track {
    @apply bg-gray-100 dark:bg-gray-700;
  }
  
  .table-of-contents::-webkit-scrollbar-thumb {
    @apply bg-gray-400 dark:bg-gray-500 rounded-full;
  }
  
  .table-of-contents::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-500 dark:bg-gray-400;
  }
</style>

<script is:inline define:vars={{ headings }}>
  document.addEventListener('DOMContentLoaded', function() {
    // Add IDs to actual headings in the content
    function addHeadingIds() {
      const contentArea = document.querySelector('.prose, article, main, .content');
      if (!contentArea) return;

      const actualHeadings = contentArea.querySelectorAll('h1, h2, h3, h4, h5, h6');
      
      headings.forEach((heading, index) => {
        if (actualHeadings[index]) {
          actualHeadings[index].id = heading.id;
          // Add anchor link icon
          const anchor = document.createElement('a');
          anchor.href = `#${heading.id}`;
          anchor.className = 'heading-anchor';
          anchor.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.102m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg>';
          anchor.style.cssText = 'opacity: 0; margin-left: 0.5rem; transition: opacity 0.2s; text-decoration: none; color: currentColor;';
          
          actualHeadings[index].style.position = 'relative';
          actualHeadings[index].appendChild(anchor);
          
          // Show anchor on hover
          actualHeadings[index].addEventListener('mouseenter', () => {
            anchor.style.opacity = '0.6';
          });
          actualHeadings[index].addEventListener('mouseleave', () => {
            anchor.style.opacity = '0';
          });
        }
      });
    }

    // Smooth scroll for TOC links
    function initSmoothScroll() {
      const tocLinks = document.querySelectorAll('.toc-link');
      
      tocLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const targetId = this.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            const offset = 80; // Account for sticky header
            const targetPosition = targetElement.offsetTop - offset;
            
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
            
            // Track TOC click
            if (typeof window.gtag !== 'undefined') {
              window.gtag('event', 'toc_click', {
                event_category: 'navigation',
                event_label: targetId
              });
            }
          }
        });
      });
    }

    // Highlight current section
    function updateActiveSection() {
      const tocLinks = document.querySelectorAll('.toc-link');
      const headingElements = Array.from(document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]'));
      
      function setActiveSection() {
        const scrollPosition = window.scrollY + 100; // Offset for better UX
        let currentSection = '';
        
        // Find the current section based on scroll position
        for (let i = headingElements.length - 1; i >= 0; i--) {
          const heading = headingElements[i];
          if (heading.offsetTop <= scrollPosition) {
            currentSection = heading.id;
            break;
          }
        }
        
        // Update active states
        tocLinks.forEach(link => {
          link.classList.remove('active');
          const linkId = link.getAttribute('data-heading-id');
          if (linkId === currentSection) {
            link.classList.add('active');
          }
        });
      }
      
      // Throttled scroll handler
      let scrollTimer;
      window.addEventListener('scroll', function() {
        if (scrollTimer) clearTimeout(scrollTimer);
        scrollTimer = setTimeout(setActiveSection, 50);
      });
      
      // Initial call
      setActiveSection();
    }

    // Reading progress
    function initReadingProgress() {
      const progressFill = document.getElementById('reading-progress');
      const progressPercentage = document.getElementById('progress-percentage');
      
      if (!progressFill || !progressPercentage) return;
      
      function updateProgress() {
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight - windowHeight;
        const scrolled = window.scrollY;
        const progress = Math.min(Math.max((scrolled / documentHeight) * 100, 0), 100);
        
        progressFill.style.width = `${progress}%`;
        progressPercentage.textContent = `${Math.round(progress)}%`;
      }
      
      window.addEventListener('scroll', updateProgress);
      updateProgress();
    }

    // Toggle TOC
    function initTocToggle() {
      const toggleButton = document.getElementById('toc-toggle');
      const tocNav = document.querySelector('.toc-nav');
      const collapseText = document.querySelector('.toc-collapse-text');
      const expandText = document.querySelector('.toc-expand-text');
      
      if (!toggleButton || !tocNav) return;
      
      toggleButton.addEventListener('click', function() {
        const isCollapsed = tocNav.classList.contains('collapsed');
        
        if (isCollapsed) {
          tocNav.classList.remove('collapsed');
          collapseText.classList.remove('hidden');
          expandText.classList.add('hidden');
        } else {
          tocNav.classList.add('collapsed');
          collapseText.classList.add('hidden');
          expandText.classList.remove('hidden');
        }
      });
    }

    // Initialize all features
    addHeadingIds();
    initSmoothScroll();
    updateActiveSection();
    initReadingProgress();
    initTocToggle();
  });
</script>