---
import { getLangFromUrl, getAlternateLangPath } from '../utils/i18n';

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const alternatePath = getAlternateLangPath(currentPath, currentLang);
const alternateLabel = currentLang === 'ko' ? 'English' : '한국어';
const currentLabel = currentLang === 'ko' ? '한국어' : 'English';
---

<div class="relative">
  <button 
    id="language-switcher" 
    class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white transition-colors"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"/>
    </svg>
    <span>{currentLabel}</span>
    <svg class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
    </svg>
  </button>
  
  <div 
    id="language-menu" 
    class="absolute right-0 mt-2 w-32 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 invisible opacity-0 transition-all duration-200 z-50"
  >
    <a 
      href={alternatePath}
      class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
    >
      {alternateLabel}
    </a>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-switcher');
    const menu = document.getElementById('language-menu');
    
    if (button && menu) {
      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!isExpanded).toString());
        
        if (isExpanded) {
          menu.classList.add('invisible', 'opacity-0');
        } else {
          menu.classList.remove('invisible', 'opacity-0');
        }
      });
      
      document.addEventListener('click', (e) => {
        if (!button.contains(e.target as Node) && !menu.contains(e.target as Node)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('invisible', 'opacity-0');
        }
      });
    }
  });
</script>