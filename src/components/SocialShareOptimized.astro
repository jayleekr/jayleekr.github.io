---
export interface Props {
  title: string;
  description: string;
  url: string;
  image?: string;
  type?: 'article' | 'website';
  publishedTime?: Date;
  modifiedTime?: Date;
  tags?: string[];
  lang?: string;
  author?: string;
  twitterCard?: 'summary' | 'summary_large_image';
}

const {
  title,
  description,
  url,
  image,
  type = 'article',
  publishedTime,
  modifiedTime,
  tags = [],
  lang = 'en',
  author = 'Jay Lee',
  twitterCard = 'summary_large_image'
} = Astro.props;

// Generate dynamic Open Graph image if no image provided
const ogImageUrl = image || `/api/og?title=${encodeURIComponent(title)}&description=${encodeURIComponent(description)}`;
const fullUrl = new URL(url, Astro.site).toString();
const fullImageUrl = new URL(ogImageUrl, Astro.site).toString();
---

<!-- Open Graph Tags -->
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={fullUrl} />
<meta property="og:image" content={fullImageUrl} />
<meta property="og:image:alt" content={`${title} - ${description}`} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:locale" content={lang === 'ko' ? 'ko_KR' : 'en_US'} />
<meta property="og:site_name" content="Jay Lee's Developer Blog" />

{type === 'article' && (
  <>
    <meta property="article:author" content={author} />
    {publishedTime && (
      <meta property="article:published_time" content={publishedTime.toISOString()} />
    )}
    {modifiedTime && (
      <meta property="article:modified_time" content={modifiedTime.toISOString()} />
    )}
    {tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Twitter Card Tags -->
<meta name="twitter:card" content={twitterCard} />
<meta name="twitter:creator" content="@jayjayleekr" />
<meta name="twitter:site" content="@jayjayleekr" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={fullImageUrl} />
<meta name="twitter:image:alt" content={`${title} - ${description}`} />

<!-- Additional Social Meta Tags -->
<meta property="fb:app_id" content="your-facebook-app-id" />

<!-- LinkedIn specific -->
<meta property="og:image:type" content="image/png" />

<!-- WhatsApp/Telegram optimization -->
<meta property="og:image:secure_url" content={fullImageUrl} />

<!-- Rich Snippets for Articles -->
{type === 'article' && (
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": title,
    "description": description,
    "url": fullUrl,
    "datePublished": publishedTime?.toISOString(),
    "dateModified": modifiedTime?.toISOString() || publishedTime?.toISOString(),
    "author": {
      "@type": "Person",
      "name": author,
      "url": "https://jayleekr.github.io/about"
    },
    "publisher": {
      "@type": "Organization",
      "name": "Jay Lee's Developer Blog",
      "logo": {
        "@type": "ImageObject",
        "url": "https://jayleekr.github.io/logo.png"
      }
    },
    "image": fullImageUrl,
    "keywords": tags.join(", "),
    "inLanguage": lang,
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": fullUrl
    }
  })} />
)}

<!-- Interactive Sharing Component -->
<div class="social-share-optimized fixed bottom-6 left-6 z-40 opacity-0 pointer-events-none transition-all duration-300" id="social-share-fab">
  <div class="share-fab bg-primary-600 hover:bg-primary-700 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg cursor-pointer transition-all duration-300">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
    </svg>
  </div>
  
  <!-- Share Options Panel -->
  <div class="share-panel absolute bottom-16 left-0 bg-white dark:bg-gray-800 rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 p-4 min-w-[280px] opacity-0 transform scale-95 transition-all duration-200 pointer-events-none">
    <h4 class="font-semibold mb-3 text-gray-900 dark:text-gray-100">Share this article</h4>
    
    <div class="share-buttons grid grid-cols-2 gap-3 mb-4">
      <!-- Twitter -->
      <button class="share-btn twitter flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/40 rounded-lg transition-colors">
        <svg class="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
        </svg>
        <span class="text-sm font-medium">Twitter</span>
      </button>
      
      <!-- LinkedIn -->
      <button class="share-btn linkedin flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/40 rounded-lg transition-colors">
        <svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
        </svg>
        <span class="text-sm font-medium">LinkedIn</span>
      </button>
      
      <!-- Facebook -->
      <button class="share-btn facebook flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/40 rounded-lg transition-colors">
        <svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
        </svg>
        <span class="text-sm font-medium">Facebook</span>
      </button>
      
      <!-- Copy Link -->
      <button class="share-btn copy-link flex items-center gap-2 p-3 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors">
        <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
        </svg>
        <span class="text-sm font-medium">Copy Link</span>
      </button>
    </div>
    
    <!-- Share Statistics -->
    <div class="share-stats text-xs text-gray-500 dark:text-gray-400 border-t border-gray-200 dark:border-gray-600 pt-3">
      <div class="flex justify-between">
        <span id="share-count">0 shares</span>
        <span id="view-count">Loading views...</span>
      </div>
    </div>
  </div>
</div>

<style>
  .social-share-optimized.visible {
    opacity: 1;
    pointer-events: auto;
  }

  .share-fab:hover {
    transform: scale(1.1);
  }

  .share-panel.visible {
    opacity: 1;
    transform: scale(1);
    pointer-events: auto;
  }

  .share-btn:hover {
    transform: translateY(-1px);
  }

  .share-btn.copied {
    background: rgb(34, 197, 94);
    color: white;
  }

  .share-btn.copied svg {
    color: white;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .social-share-optimized {
      bottom: 5rem;
      left: 1rem;
    }

    .share-panel {
      min-width: calc(100vw - 2rem);
      left: 0;
      transform: translateX(-50%);
    }

    .share-buttons {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  interface ShareData {
    title: string;
    description: string;
    url: string;
    image: string;
  }

  class SocialShareOptimized {
    private container: HTMLElement;
    private fab: HTMLElement;
    private panel: HTMLElement;
    private shareData: ShareData;
    private isVisible: boolean = false;

    constructor(container: HTMLElement) {
      this.container = container;
      this.fab = container.querySelector('.share-fab')!;
      this.panel = container.querySelector('.share-panel')!;
      
      this.shareData = {
        title: document.title,
        description: document.querySelector('meta[name="description"]')?.getAttribute('content') || '',
        url: window.location.href,
        image: document.querySelector('meta[property="og:image"]')?.getAttribute('content') || ''
      };

      this.init();
    }

    private init(): void {
      this.bindEvents();
      this.setupIntersectionObserver();
      this.loadShareStats();
    }

    private bindEvents(): void {
      // FAB click to toggle panel
      this.fab.addEventListener('click', () => {
        this.togglePanel();
      });

      // Share button clicks
      const shareButtons = this.panel.querySelectorAll('.share-btn');
      shareButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.currentTarget as HTMLElement;
          this.handleShare(target);
        });
      });

      // Close panel when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.container.contains(e.target as Node)) {
          this.hidePanel();
        }
      });

      // Keyboard navigation
      this.fab.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.togglePanel();
        }
      });
    }

    private togglePanel(): void {
      if (this.panel.classList.contains('visible')) {
        this.hidePanel();
      } else {
        this.showPanel();
      }
    }

    private showPanel(): void {
      this.panel.classList.add('visible');
      this.fab.classList.add('active');
    }

    private hidePanel(): void {
      this.panel.classList.remove('visible');
      this.fab.classList.remove('active');
    }

    private handleShare(button: HTMLElement): void {
      const platform = button.classList[1]; // e.g., 'twitter', 'linkedin'
      
      switch (platform) {
        case 'twitter':
          this.shareToTwitter();
          break;
        case 'linkedin':
          this.shareToLinkedIn();
          break;
        case 'facebook':
          this.shareToFacebook();
          break;
        case 'copy-link':
          this.copyToClipboard(button);
          break;
      }

      // Track share event
      this.trackShare(platform);
    }

    private shareToTwitter(): void {
      const text = `${this.shareData.title} - ${this.shareData.description}`;
      const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(this.shareData.url)}&via=jayjayleekr`;
      this.openShareWindow(url);
    }

    private shareToLinkedIn(): void {
      const url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(this.shareData.url)}`;
      this.openShareWindow(url);
    }

    private shareToFacebook(): void {
      const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(this.shareData.url)}`;
      this.openShareWindow(url);
    }

    private async copyToClipboard(button: HTMLElement): Promise<void> {
      try {
        await navigator.clipboard.writeText(this.shareData.url);
        
        // Visual feedback
        const originalContent = button.innerHTML;
        button.classList.add('copied');
        button.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          <span class="text-sm font-medium">Copied!</span>
        `;

        setTimeout(() => {
          button.classList.remove('copied');
          button.innerHTML = originalContent;
        }, 2000);

      } catch (err) {
        console.error('Failed to copy to clipboard:', err);
        // Fallback for older browsers
        this.fallbackCopy();
      }
    }

    private fallbackCopy(): void {
      const textArea = document.createElement('textarea');
      textArea.value = this.shareData.url;
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        document.execCommand('copy');
      } catch (err) {
        console.error('Fallback copy failed:', err);
      }
      
      document.body.removeChild(textArea);
    }

    private openShareWindow(url: string): void {
      const width = 600;
      const height = 400;
      const left = (window.innerWidth - width) / 2;
      const top = (window.innerHeight - height) / 2;
      
      window.open(
        url,
        'share',
        `width=${width},height=${height},left=${left},top=${top},resizable=yes,scrollbars=yes`
      );
    }

    private setupIntersectionObserver(): void {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const shouldShow = entry.isIntersecting && window.scrollY > 500;
          
          if (shouldShow && !this.isVisible) {
            this.container.classList.add('visible');
            this.isVisible = true;
          } else if (!shouldShow && this.isVisible) {
            this.container.classList.remove('visible');
            this.hidePanel();
            this.isVisible = false;
          }
        });
      }, { threshold: 0.1 });

      // Observe the main content area
      const mainContent = document.querySelector('main, article, .prose');
      if (mainContent) {
        observer.observe(mainContent);
      }
    }

    private async loadShareStats(): Promise<void> {
      try {
        // Load share count from your analytics API
        const shareCountElement = this.panel.querySelector('#share-count');
        const viewCountElement = this.panel.querySelector('#view-count');
        
        // Mock implementation - replace with your actual API
        const response = await fetch(`/api/stats?url=${encodeURIComponent(this.shareData.url)}`);
        const stats = await response.json();
        
        if (shareCountElement) {
          shareCountElement.textContent = `${stats.shares || 0} shares`;
        }
        
        if (viewCountElement) {
          viewCountElement.textContent = `${stats.views || 0} views`;
        }
      } catch (error) {
        console.log('Failed to load share stats:', error);
        const viewCountElement = this.panel.querySelector('#view-count');
        if (viewCountElement) {
          viewCountElement.textContent = '';
        }
      }
    }

    private trackShare(platform: string): void {
      // Google Analytics 4
      if (typeof (window as any).gtag !== 'undefined') {
        (window as any).gtag('event', 'share', {
          method: platform,
          content_type: 'article',
          item_id: this.shareData.url
        });
      }

      // Custom analytics
      if (typeof (window as any).plausible !== 'undefined') {
        (window as any).plausible('Share', { props: { platform: platform } });
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const shareComponent = document.querySelector('#social-share-fab');
    if (shareComponent) {
      new SocialShareOptimized(shareComponent as HTMLElement);
    }
  });
</script>