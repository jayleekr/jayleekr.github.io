---
// ThemeToggle component for dark/light mode switching
---

<button
	id="theme-toggle"
	data-testid="theme-toggle"
	type="button"
	class="inline-flex items-center justify-center p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 focus:ring-offset-white dark:focus:ring-offset-gray-900 transition-all duration-200"
	aria-label="Toggle between light and dark mode"
	aria-pressed="false"
	title="Toggle theme (current: light)"
	role="switch"
>
	<!-- Sun icon (visible in dark mode) -->
	<svg 
		id="theme-toggle-dark-icon" 
		class="hidden w-5 h-5" 
		fill="currentColor" 
		viewBox="0 0 20 20" 
		xmlns="http://www.w3.org/2000/svg"
		aria-hidden="true"
	>
		<path 
			fill-rule="evenodd" 
			d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" 
			clip-rule="evenodd"
		></path>
	</svg>
	<!-- Moon icon (visible in light mode) -->
	<svg 
		id="theme-toggle-light-icon" 
		class="w-5 h-5" 
		fill="currentColor" 
		viewBox="0 0 20 20" 
		xmlns="http://www.w3.org/2000/svg"
		aria-hidden="true"
	>
		<path 
			d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
		></path>
	</svg>
</button>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const themeToggleBtn = document.getElementById('theme-toggle');
		const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
		const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
		
		// Utility function to announce changes to screen readers
		function announceToScreenReader(message: string) {
			const announcement = document.createElement('div');
			announcement.setAttribute('aria-live', 'polite');
			announcement.setAttribute('aria-atomic', 'true');
			announcement.className = 'sr-only';
			announcement.textContent = message;
			document.body.appendChild(announcement);
			
			// Remove after announcement
			setTimeout(() => {
				document.body.removeChild(announcement);
			}, 1000);
		}

		// Check if elements exist
		if (!themeToggleBtn || !themeToggleDarkIcon || !themeToggleLightIcon) {
			return;
		}

		// Get theme from localStorage or system preference
		function getStoredTheme(): string {
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme') || 'light';
			}
			return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
		}

		// Set theme and update UI with accessibility attributes
		function setTheme(theme: string) {
			if (theme === 'dark') {
				document.documentElement.classList.add('dark');
				themeToggleLightIcon?.classList.add('hidden');
				themeToggleDarkIcon?.classList.remove('hidden');
				// Update accessibility attributes
				themeToggleBtn?.setAttribute('aria-pressed', 'true');
				themeToggleBtn?.setAttribute('title', 'Switch to light mode (current: dark)');
				themeToggleBtn?.setAttribute('aria-label', 'Switch to light mode');
			} else {
				document.documentElement.classList.remove('dark');
				themeToggleLightIcon?.classList.remove('hidden');
				themeToggleDarkIcon?.classList.add('hidden');
				// Update accessibility attributes
				themeToggleBtn?.setAttribute('aria-pressed', 'false');
				themeToggleBtn?.setAttribute('title', 'Switch to dark mode (current: light)');
				themeToggleBtn?.setAttribute('aria-label', 'Switch to dark mode');
			}
			
			// Store theme preference
			if (typeof localStorage !== 'undefined') {
				localStorage.setItem('theme', theme);
			}
			
			// Announce theme change to screen readers
			const announcement = theme === 'dark' ? 'Dark mode enabled' : 'Light mode enabled';
			announceToScreenReader(announcement);
		}

		// Initialize theme
		const currentTheme = getStoredTheme();
		setTheme(currentTheme);

		// Toggle theme on button click
		themeToggleBtn.addEventListener('click', () => {
			const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
			const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
			setTheme(newTheme);
		});
		
		// Support keyboard navigation (Space and Enter)
		themeToggleBtn.addEventListener('keydown', (event) => {
			if (event.key === ' ' || event.key === 'Enter') {
				event.preventDefault();
				const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
				const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
				setTheme(newTheme);
			}
		});

		// Listen for system theme changes
		if (typeof window !== 'undefined') {
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				// Only auto-switch if user hasn't manually set a preference
				if (!localStorage.getItem('theme')) {
					setTheme(e.matches ? 'dark' : 'light');
				}
			});
		}
	});
</script>

<style>
	/* Smooth transition for theme changes */
	:global(html) {
		transition: background-color 0.3s ease, color 0.3s ease;
	}
	
	:global(html *) {
		transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
	}
	
	/* Prevent transition on page load */
	:global(html.no-transition *) {
		transition: none !important;
	}
</style>