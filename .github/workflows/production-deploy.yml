name: Production Deployment

on:
  push:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '300'

permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write
  statuses: write

concurrency:
  group: production-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Pre-deployment validation
  pre-deployment-check:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      build-info: ${{ steps.build-info.outputs.info }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate build info
        id: build-info
        run: |
          BUILD_INFO="{
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"commit\": \"$GITHUB_SHA\",
            \"shortCommit\": \"$(echo $GITHUB_SHA | cut -c1-8)\",
            \"branch\": \"$GITHUB_REF_NAME\",
            \"actor\": \"$GITHUB_ACTOR\",
            \"runId\": \"$GITHUB_RUN_ID\",
            \"runNumber\": \"$GITHUB_RUN_NUMBER\"
          }"
          echo "info=$BUILD_INFO" >> $GITHUB_OUTPUT
          echo "$BUILD_INFO" > build-info.json

      - name: Validate configuration
        id: validation
        run: |
          echo "🔍 Validating deployment configuration..."
          
          # Check required files
          REQUIRED_FILES=(
            "package.json"
            "astro.config.mjs"
            "public/_headers"
            "public/.well-known/security.txt"
            "SECURITY.md"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
          done
          
          # Check package.json scripts
          REQUIRED_SCRIPTS=("build" "test" "type-check" "lint")
          for script in "${REQUIRED_SCRIPTS[@]}"; do
            if ! npm run "$script" --if-present &>/dev/null; then
              echo "⚠️ Script '$script' not available or failing"
            fi
          done
          
          # Validate security headers
          if ! grep -q "Content-Security-Policy" public/_headers; then
            echo "❌ Missing Content-Security-Policy in _headers"
            exit 1
          fi
          
          echo "✅ All validation checks passed"
          echo "should-deploy=true" >> $GITHUB_OUTPUT

      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.json
          retention-days: 30

  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    if: needs.pre-deployment-check.outputs.should-deploy == 'true'
    outputs:
      build-size: ${{ steps.build-analysis.outputs.size }}
      build-hash: ${{ steps.build-analysis.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info

      - name: Run quality checks
        run: |
          echo "🔍 Running quality checks..."
          npm run type-check
          npm run lint
          npm run test:unit
          echo "✅ Quality checks passed"

      - name: Build site
        run: |
          echo "🏗️ Building site..."
          npm run build
          
          # Copy build info to dist
          cp build-info.json dist/
          
          # Add security headers validation
          cp public/_headers dist/
          
          # Create .nojekyll to prevent Jekyll processing
          touch dist/.nojekyll
          
          echo "✅ Build completed"

      - name: Build analysis
        id: build-analysis
        run: |
          echo "📊 Analyzing build output..."
          
          # Calculate build size
          BUILD_SIZE=$(du -sh dist | cut -f1)
          echo "Build size: $BUILD_SIZE"
          echo "size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          
          # Generate build hash for cache busting
          BUILD_HASH=$(find dist -type f -exec sha256sum {} \; | sort | sha256sum | cut -c1-8)
          echo "Build hash: $BUILD_HASH"
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          
          # Generate detailed build report
          echo "## Build Report" > build-report.md
          echo "- **Size**: $BUILD_SIZE" >> build-report.md
          echo "- **Hash**: $BUILD_HASH" >> build-report.md
          echo "- **Files**: $(find dist -type f | wc -l) files" >> build-report.md
          echo "- **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build-report.md
          
          # List largest files
          echo "### Largest Files" >> build-report.md
          find dist -type f -exec du -h {} \; | sort -hr | head -10 >> build-report.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 30

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 30

  # Performance testing
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-and-test]
    if: needs.pre-deployment-check.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start preview server
        run: |
          npx serve dist -p 4321 &
          echo $! > server.pid
          npx wait-on http://localhost:4321 --timeout 30000

      - name: Run performance tests
        run: |
          echo "🚀 Running performance validation..."
          npm run test:lighthouse
          
          # Performance budget validation
          echo "📊 Validating performance budgets..."
          
          # Stop server
          kill $(cat server.pid) || true

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            .lighthouseci/
            playwright-report/
          retention-days: 30

  # Create deployment
  create-deployment:
    name: Create Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-and-test, performance-validation]
    if: needs.pre-deployment-check.outputs.should-deploy == 'true'
    outputs:
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: `Deploy ${context.sha.substring(0, 8)} to production`,
              auto_merge: false,
              required_contexts: []
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-and-test, performance-validation, create-deployment]
    if: needs.pre-deployment-check.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://jayleekr.github.io
    steps:
      - name: Update deployment status (in progress)
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'in_progress',
              description: 'Deployment in progress...'
            });

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: |
            🚀 Deploy ${{ github.sha }}
            
            Build: ${{ needs.build-and-test.outputs.build-hash }}
            Size: ${{ needs.build-and-test.outputs.build-size }}
            Actor: ${{ github.actor }}

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'success',
              environment_url: 'https://jayleekr.github.io',
              description: 'Deployment successful! 🎉'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'failure',
              description: 'Deployment failed ❌'
            });

  # Post-deployment validation
  post-deployment-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy, create-deployment]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: Wait for deployment propagation
        run: |
          echo "⏳ Waiting for deployment to propagate..."
          sleep 30

      - name: Validate deployment
        run: |
          echo "🔍 Validating production deployment..."
          
          # Check site accessibility
          response=$(curl -s -o /dev/null -w "%{http_code}" https://jayleekr.github.io/)
          if [[ "$response" != "200" ]]; then
            echo "❌ Site not accessible (HTTP $response)"
            exit 1
          fi
          
          # Check security headers
          headers=$(curl -s -I https://jayleekr.github.io/)
          
          required_headers=(
            "x-frame-options"
            "x-content-type-options"
            "content-security-policy"
          )
          
          for header in "${required_headers[@]}"; do
            if ! echo "$headers" | grep -i "$header" > /dev/null; then
              echo "⚠️ Missing security header: $header"
            fi
          done
          
          echo "✅ Production validation completed"

      - name: Update deployment status (validated)
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'success',
              environment_url: 'https://jayleekr.github.io',
              description: 'Deployment validated and live! ✅'
            });

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [post-deployment-validation]
    if: always()
    steps:
      - name: Cleanup old deployments
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 10
            });
            
            // Keep only the latest 5 deployments
            const deploymentsToDelete = deployments.data.slice(5);
            
            for (const deployment of deploymentsToDelete) {
              try {
                await github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
                console.log(`Deleted old deployment: ${deployment.id}`);
              } catch (error) {
                console.log(`Failed to delete deployment ${deployment.id}: ${error.message}`);
              }
            }